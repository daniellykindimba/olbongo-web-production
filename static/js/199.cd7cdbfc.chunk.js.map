{"version":3,"file":"static/js/199.cd7cdbfc.chunk.js","mappings":"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","sources":["apps/control/components/sms_sent_component.tsx","apps/control/pages/sms_sent_page.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  SearchOutlined,\n  DeleteOutlined,\n  SyncOutlined,\n  EditOutlined,\n  PlusOutlined,\n  OrderedListOutlined,\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Modal,\n  Popconfirm,\n  Table,\n  Tag,\n  Tooltip,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Row} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {CombinationData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {EditRegionFormComponent} from \"./forms/edit_region_form\";\nimport {AddingCombinationSubjectsComponent} from \"./adding_combinations_subjects_component\";\nimport {CombinationSubjectsListComponent} from \"./combination_subjects_list_component\";\nimport {ChannelMessageDispatchData} from \"apps/njiwa/interfaces\";\n\ninterface SearchFormData {\n  key: string;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\nexport const SmsSentComponent: React.FC<Props> = (props: Props) => {\n  const [dispatch, setDispatch] = useState<ChannelMessageDispatchData>();\n  const [dispatches, setDispatches] = useState<ChannelMessageDispatchData[]>(\n    []\n  );\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<SearchFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n\n  const synSmsCdr = async () => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"syncCombinations\",\n        variables: {},\n        fields: [\"success\", \"message\"],\n      },\n    });\n  };\n\n  const columns = [\n    {\n      title: \"Receipient Phone\",\n      dataIndex: \"receipientPhone\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.receipientPhoneNumber}</a>\n          <Tag style={{marginLeft: 5}}>{row.carrier}</Tag>\n        </span>\n      ),\n    },\n    {\n        title: \"Channel\",\n        dataIndex: \"channel\",\n        fixed: true,\n        render: (text: any, row: any, index: any) => (\n          <span>\n            {row?.channelMessage?.channel?.name}\n          </span>\n        ),\n      },\n    {\n      title: \"Content\",\n      dataIndex: \"content\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.messageContent}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"status\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <Tag color={row.statusColor}>{row.status}</Tag>\n        </span>\n      ),\n    },\n    {\n      title: \"Created\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => <span></span>,\n    },\n  ];\n\n  const getDispatches = async (\n    start: number,\n    key: string = \"\",\n    limit: number = 20\n  ) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"messagesDispatches\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              {\n                channelMessage: [\n                    \"id\",\n                    \"message\",\n                    \"messageCount\",\n                    {\n                        creator: [\n                            \"id\",\n                            \"fullName\",\n                            \"email\",\n                            \"phone\",\n                            \"firstName\",\n                            \"middleName\",\n                            \"lastName\"\n                        ]\n                    },\n                    {\n                        channel: [\n                            \"id\",\n                            \"name\",\n                            \"code\"\n                        ]\n                    }\n                ]\n              },\n              \"receipientPhoneNumber\",\n              \"carrier\",\n              \"statusColor\",\n              \"sentAt\",\n              \"deliveredAt\",\n              \"failedAt\",\n              \"messageCount\",\n              \"messageContent\",\n              \"status\",\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setDispatches(data.results);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getDispatches(start, \"\", 50);\n  }, []);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        <Col span={12}>\n          <Form<SearchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setStart(1);\n              dispatches.length = 0;\n              getDispatches(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search ...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n        <Col span={12} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Button\n            size=\"large\"\n            icon={<SyncOutlined />}\n            onClick={() => synSmsCdr()}\n          >\n            Sync CDR\n          </Button>\n        </Col>\n      </Row>\n\n      <div>\n        <Table\n          loading={loading}\n          columns={columns}\n          dataSource={dispatches}\n          scroll={{x: true}}\n          pagination={{\n            onChange: (page, pageSize) => {\n              setLimit(pageSize);\n              getDispatches(page, searchKey, pageSize);\n            },\n            total: total,\n            pageSize: limit,\n            position: [\"bottomCenter\"],\n            showQuickJumper: true,\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","import {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {SmsSentComponent} from \"../components/sms_sent_component\";\nimport {ControlLayout} from \"../control_layout\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport {ControlPermitted} from \"../components/permissions/control_permission\";\n\nconst SmsSent: React.FC = () => {\n  return (\n    <div style={{marginTop: 10}}>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to={\"/control\"}>Home</Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>Sms Sent</Breadcrumb.Item>\n      </Breadcrumb>\n      <SmsSentComponent height={80} />\n    </div>\n  );\n};\n\nexport const SmsSentPage = () => {\n  useEffect(() => {\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <SmsSent />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["SmsSentComponent","props","useState","dispatches","setDispatches","start","setStart","total","setTotal","limit","setLimit","searchKey","setHasNext","loading","setLoading","useNavigation","push","Form","searchForm","synSmsCdr","Grid","lg","gqlDataProvider","url","method","metaData","operation","variables","fields","data","columns","title","dataIndex","fixed","render","text","row","index","receipientPhoneNumber","style","marginLeft","carrier","channelMessage","channel","name","messageContent","color","statusColor","status","ReactTimeAgo","date","Date","created","isActive","getDispatches","key","page","value","type","required","pageSize","results","creator","hasNext","useEffect","marginTop","span","layout","form","onFinish","values","length","size","placeholder","prefix","SearchOutlined","autoComplete","allowClear","display","justifyContent","icon","SyncOutlined","onClick","dataSource","scroll","x","pagination","onChange","position","showQuickJumper","SmsSent","to","height","SmsSentPage","window","history","pushState","urlAppendString"],"sourceRoot":""}