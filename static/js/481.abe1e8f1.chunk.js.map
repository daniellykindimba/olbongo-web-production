{"version":3,"file":"static/js/481.abe1e8f1.chunk.js","mappings":"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","sources":["apps/control/components/forms/edit_user_form.tsx","apps/control/components/forms/create_system_user_form.tsx","apps/control/components/forms/create_user_ldap_credentials_form.tsx","apps/control/components/users.tsx","apps/control/pages/users_page.tsx"],"sourcesContent":["import {Button, Checkbox, Form, Input} from \"@pankod/refine-antd\";\nimport {useEffect, useState} from \"react\";\n\nconst {TextArea} = Input;\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n  member?: any;\n}\n\nexport const EditUserFormComponent: React.FC<Props> = (props: Props) => {\n  const [isAdmin, setIsAdmin] = useState(props.member.isAdmin);\n  const [isStaff, setIsStaff] = useState(props.member.isStaff);\n\n  useEffect(() => {\n    props.form.setFieldsValue({\n      firstName: props.member.firstName,\n      middleName: props.member.middleName,\n      lastName: props.member.lastName,\n      email: props.member.email,\n      phone: props.member.phone,\n      isAdmin: props.member.isAdmin,\n      isStaff: props.member.isStaff,\n    });\n  }, [props.form, props.member]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values[\"id\"] = parseInt(props.member.id);\n          values[\"isAdmin\"] = isAdmin;\n          values[\"isStaff\"] = isStaff;\n          props.onFinish(values);\n        }}\n        requiredMark={true}\n      >\n        <Form.Item\n          name=\"firstName\"\n          label=\"First Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input First Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter First Name ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"middleName\"\n          label=\"Middle Name\"\n          rules={[\n            {\n              required: false,\n              type: \"string\",\n              message: \"Please input Middle Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Middle Name ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"lastName\"\n          label=\"Last Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Last Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Last Name ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"email\"\n          label=\"Email\"\n          rules={[\n            {\n              required: false,\n              type: \"email\",\n              message: \"Please input Email Address\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Email Address ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"phone\"\n          label=\"Mobile Phone Number\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Mobile Phone Number ...\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Mobile Phone Number ...\" />\n        </Form.Item>\n\n        <Form.Item name=\"isAdmin\" rules={[{required: false, type: \"boolean\"}]}>\n          <Checkbox\n            defaultChecked={isAdmin}\n            onChange={() => {\n              setIsAdmin(!isAdmin);\n            }}\n          >\n            Admin\n          </Checkbox>\n        </Form.Item>\n\n        <Form.Item name=\"isStaff\" rules={[{required: false, type: \"boolean\"}]}>\n          <Checkbox\n            defaultChecked={isStaff}\n            checked={isStaff}\n            onChange={() => {\n              setIsStaff(!isStaff);\n            }}\n          >\n            Staff\n          </Checkbox>\n        </Form.Item>\n\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","import {Button, Checkbox, Form, Input, Tag, message} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n}\n\nconst userDataKeys = [\n  \"id\",\n  \"firstName\",\n  \"lastName\",\n  \"email\",\n  \"middleName\",\n  \"fullName\",\n  \"phone\",\n  \"pic\",\n  \"username\",\n  \"isActive\",\n  \"isStaff\",\n  \"isAdmin\",\n  \"ldapAuth\",\n  \"created\",\n  \"updated\",\n  \"canEdit\",\n  \"canDelete\",\n  \"canManage\",\n];\n\nexport const CreateSystemUserFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isStaff, setIsStaff] = useState(false);\n  const [ldapAuth, setLdapAuth] = useState(false);\n\n  const onCreate = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"createUserExtended\",\n        variables: {\n          firstName: {\n            value: values.firstName,\n            type: \"String\",\n            required: true,\n          },\n          middleName: {\n            value: values.middleName,\n            type: \"String\",\n            required: true,\n          },\n          lastName: {value: values.lastName, type: \"String\", required: true},\n          username: {value: values.username, type: \"String\", required: false},\n          email: {value: values.email, type: \"String\", required: !ldapAuth},\n          phone: {value: values.phone, type: \"String\", required: true},\n          password: {\n            value: values.password,\n            type: \"String\",\n            required: !ldapAuth,\n          },\n          passwordRepeat: {\n            value: values.passwordRepeat,\n            type: \"String\",\n            required: !ldapAuth,\n          },\n          isAdmin: {\n            value: values.isAdmin,\n            type: \"Boolean\",\n            required: false,\n          },\n          isStaff: {\n            value: values.isStaff,\n            type: \"Boolean\",\n            required: false,\n          },\n          ldapAuth: {\n            value: values.ldapAuth,\n            type: \"Boolean\",\n            required: false,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            user: userDataKeys,\n          },\n        ],\n      },\n    });\n    if (data.success) {\n      message.success(data.message);\n      props.onFinish(data.user);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  useEffect(() => {}, [props.form]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values[\"isAdmin\"] = isAdmin;\n          values[\"isStaff\"] = isStaff;\n          values[\"ldapAuth\"] = ldapAuth;\n          if (!ldapAuth) {\n            values[\"username\"] = values.email;\n          }\n          onCreate(values);\n        }}\n        requiredMark={true}\n      >\n        <div style={{maxHeight: \"70vh\", overflowY: \"auto\", padding: 20}}>\n          <Form.Item\n            name=\"ldapAuth\"\n            rules={[{required: false, type: \"boolean\"}]}\n          >\n            <Checkbox\n              defaultChecked={ldapAuth}\n              onChange={() => {\n                setLdapAuth(!ldapAuth);\n              }}\n            >\n              LDAP Authentication\n            </Checkbox>\n          </Form.Item>\n          <Form.Item\n            name=\"firstName\"\n            label=\"First Name\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input First Name\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter First Name ...\" />\n          </Form.Item>\n          <Form.Item\n            name=\"middleName\"\n            label=\"Middle Name\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Middle Name\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Middle Name ...\" />\n          </Form.Item>\n          <Form.Item\n            name=\"lastName\"\n            label=\"Last Name\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Last Name\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Last Name ...\" />\n          </Form.Item>\n          <Form.Item\n            name=\"email\"\n            label={\n              <>\n                Email Address\n                {!ldapAuth && <Tag color=\"green\">Username</Tag>}\n              </>\n            }\n            rules={[\n              {\n                required: !ldapAuth,\n                type: \"email\",\n                message: \"Please input Email Address\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Email Address ...\" />\n          </Form.Item>\n\n          {ldapAuth && (\n            <Form.Item\n              name=\"username\"\n              label=\"Username\"\n              rules={[\n                {\n                  required: ldapAuth,\n                  type: \"string\",\n                  message: \"Please input Username ...\",\n                },\n              ]}\n            >\n              <Input size=\"large\" placeholder=\"Enter Username ...\" />\n            </Form.Item>\n          )}\n\n          {!ldapAuth && (\n            <>\n              <Form.Item\n                name=\"password\"\n                label=\"Password\"\n                rules={[\n                  {\n                    required: !ldapAuth,\n                    type: \"string\",\n                    message: \"Please input Password ...\",\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  type=\"password\"\n                  placeholder=\"Enter Password ...\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRepeat\"\n                label=\"Password Confirm\"\n                rules={[\n                  {\n                    required: !ldapAuth,\n                    type: \"string\",\n                    message: \"Please input Password Confirm ...\",\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  type=\"password\"\n                  placeholder=\"Enter Password Confirm ...\"\n                />\n              </Form.Item>\n            </>\n          )}\n\n          <Form.Item\n            name=\"phone\"\n            label=\"Mobile Phone\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Mobile Phone\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Email Address ...\" />\n          </Form.Item>\n          <Form.Item\n            name=\"isAdmin\"\n            rules={[{required: false, type: \"boolean\"}]}\n          >\n            <Checkbox\n              defaultChecked={isAdmin}\n              onChange={() => {\n                setIsAdmin(!isAdmin);\n              }}\n            >\n              Admin\n            </Checkbox>\n          </Form.Item>\n          <Form.Item\n            name=\"isStaff\"\n            rules={[{required: false, type: \"boolean\"}]}\n          >\n            <Checkbox\n              defaultChecked={isStaff || ldapAuth}\n              checked={isStaff || ldapAuth}\n              onChange={() => {\n                setIsStaff(!isStaff);\n              }}\n            >\n              Staff\n            </Checkbox>\n          </Form.Item>\n        </div>\n\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Button size=\"large\" htmlType=\"submit\" danger>\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","import {Button, Form, Input, message, Typography} from \"@pankod/refine-antd\";\nimport {Alert} from \"antd\";\nimport {gqlDataProvider} from \"api\";\nimport moment from \"moment\";\nimport {useEffect} from \"react\";\nconst {Paragraph} = Typography;\n\ninterface FormData {\n  userId: number;\n  username: string;\n  password: string;\n  passwordConfirm: string;\n}\n\ninterface Props {\n  onFinish?: any;\n  member?: any;\n}\n\nexport const CreateUserLDAPCredentialsFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [form] = Form.useForm<FormData>();\n\n  const onFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"createLdapCredentials\",\n        variables: {\n          userId: {value: values.userId, type: \"Int\", required: true},\n          username: {\n            value: values.username,\n            type: \"String\",\n            required: false,\n          },\n          password: {\n            value: values.password,\n            type: \"String\",\n            required: false,\n          },\n          passwordConfirm: {\n            value: values.passwordConfirm,\n            type: \"String\",\n            required: false,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      form.resetFields();\n      props.onFinish();\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  useEffect(() => {}, [props.member]);\n\n  return (\n    <>\n      <h2>\n        Copy the link below and send it to the user to create their LDAP\n        credentials\n        <span style={{color: \"red\"}}>Link Expires in 24Hours</span>\n      </h2>\n      {/* a container that contain a link to copy */}\n      <Alert\n        type=\"info\"\n        message={\n          <>\n            <Paragraph copyable style={{fontSize: \"22px\"}}>\n              {\n                window.location.origin + \n                \"/auth/ldap/\" +\n                moment().add(\"h\", 24).valueOf() +\n                \"/\" +\n                props.member?.id +\n                \"/login?fname=\" +\n                props.member?.firstName +\n                \"&lname=\" +\n                props.member?.lastName +\n                \"&mname=\" +\n                props.member?.middleName +\n                \"&email=\" +\n                props.member?.email\n              }\n            </Paragraph>\n          </>\n        }\n      />\n      <div style={{marginTop: 50}}>\n        <Form\n          layout=\"vertical\"\n          form={form}\n          onFinish={(values) => {\n            values.userId = parseInt(props.member?.id ?? \"0\");\n            onFinish(values);\n          }}\n          requiredMark={true}\n        >\n          <Form.Item\n            name=\"username\"\n            label=\"Username\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Username\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Username ...\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            label=\"Password\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Password\",\n              },\n            ]}\n          >\n            <Input\n              size=\"large\"\n              type=\"password\"\n              placeholder=\"Enter Password ...\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"passwordConfirm\"\n            label=\"Confirm Password\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Confirm Password\",\n              },\n              // validate password confirm to be equal to password\n              ({getFieldValue}) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue(\"password\") === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(\n                      \"The two passwords that you entered do not match!\"\n                    )\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input\n              size=\"large\"\n              type=\"password\"\n              placeholder=\"Enter Confirm Password ...\"\n            />\n          </Form.Item>\n\n          <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n            <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n              Save\n            </Button>\n          </div>\n        </Form>\n      </div>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  SearchOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  UnlockFilled,\n  LockFilled,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport {AiOutlineLogin} from \"react-icons/ai\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Popconfirm,\n  Table,\n  Tag,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Modal, Row} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {UserData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {EditUserFormComponent} from \"./forms/edit_user_form\";\nimport {CreateSystemUserFormComponent} from \"./forms/create_system_user_form\";\nimport {CreateUserLDAPCredentialsFormComponent} from \"./forms/create_user_ldap_credentials_form\";\n\ninterface MembersSearchFormData {\n  key: string;\n}\n\ninterface userFormData {\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  email: string;\n  username: string;\n  isAdmin: boolean;\n  isStaff: boolean;\n  ldapAuth: boolean;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\nconst userDataKeys = [\n  \"id\",\n  \"firstName\",\n  \"lastName\",\n  \"email\",\n  \"middleName\",\n  \"fullName\",\n  \"phone\",\n  \"pic\",\n  \"username\",\n  \"isActive\",\n  \"isStaff\",\n  \"isAdmin\",\n  \"ldapAuth\",\n  \"created\",\n  \"updated\",\n  \"canEdit\",\n  \"canDelete\",\n  \"canManage\",\n];\n\nexport const UsersComponent: React.FC<Props> = (props: Props) => {\n  const [member, setMember] = useState<UserData | any>();\n  const [members, setMembers] = useState<UserData[]>([]);\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<MembersSearchFormData>();\n  const [form] = Form.useForm<userFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n  const [editModal, setEditModal] = useState(false);\n  const [createModal, setCreateModal] = useState(false);\n  const [createLdapCredentialsModal, setCreateLdapCredentialsModal] =\n    useState(false);\n\n  // get query params\n  const params = new URLSearchParams(window.location.search);\n  const status = params.get(\"status\") || \"0\";\n  const role = params.get(\"role\") || \"user\";\n\n  const handleCreateLdapCredentialsModal = (member: UserData) => {\n    setMember(member);\n    setCreateLdapCredentialsModal(true);\n  };\n\n  const showEditUserModal = (member: UserData) => {\n    setMember(member);\n    setEditModal(true);\n  };\n\n  const handleOk = () => {\n    setEditModal(false);\n  };\n\n  const handleCancel = () => {\n    setEditModal(false);\n  };\n\n  const onLdapFinish = async () => {\n    setCreateLdapCredentialsModal(false);\n  };\n\n  const onEditFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"updateUser\",\n        variables: {\n          id: {value: values.id, type: \"Int\", required: true},\n          firstName: {\n            value: values.firstName,\n            type: \"String\",\n            required: false,\n          },\n          middleName: {\n            value: values.middleName,\n            type: \"String\",\n            required: false,\n          },\n          lastName: {value: values.lastName, type: \"String\", required: false},\n          email: {value: values.email, type: \"String\", required: false},\n          phone: {value: values.phone, type: \"String\", required: false},\n          isAdmin: {\n            value: values.isAdmin,\n            type: \"Boolean\",\n            required: false,\n          },\n          isStaff: {\n            value: values.isStaff,\n            type: \"Boolean\",\n            required: false,\n          },\n          ldapAuth: {\n            value: values.ldapAuth,\n            type: \"Boolean\",\n            required: false,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            user: userDataKeys,\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n\n      form.resetFields();\n      setEditModal(false);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const onCreate = async (member: UserData) => {\n    setMembers([member, ...members]);\n    setCreateModal(false);\n  };\n\n  const confirmDelete = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"deleteUser\",\n        variables: {\n          id: {\n            value: parseInt(id.toString()),\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setMembers(members.filter((member) => member.id !== id));\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const blockingUser = async (id: number, block: boolean) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"blockUnblockUser\",\n        variables: {\n          id: {\n            value: parseInt(id.toString()),\n            type: \"Int\",\n            required: true,\n          },\n          block: {\n            value: block,\n            type: \"Boolean\",\n            required: true,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            user: userDataKeys,\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setMembers(\n        members.map((member) => {\n          if (member.id === id) {\n            return data.user;\n          }\n          return member;\n        })\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const cancelDelete = () => {\n    message.info(\"Canceled\");\n  };\n\n  const columns = [\n    {\n      title: \"Full Name\",\n      dataIndex: \"full_name\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.fullName}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Username\",\n      dataIndex: \"username\",\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.username}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n      render: (text: any, row: any, index: any) => (\n        <span>\n          {row.email && <Tag color=\"green\">{row.email}</Tag>}\n          {row.phone && <Tag color=\"green\">{row.phone}</Tag>}\n        </span>\n      ),\n    },\n    {\n      title: \"LDAP Auth\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            {row.ldapAuth ? (\n              <Tag color=\"green\">Yes</Tag>\n            ) : (\n              <Tag color=\"red\">No</Tag>\n            )}\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Date Joined\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => (\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          {row.ldapAuth && (\n            <Button\n              icon={<AiOutlineLogin />}\n              disabled={!row?.canEdit}\n              onClick={() => handleCreateLdapCredentialsModal(row)}\n              danger\n            ></Button>\n          )}\n          <Popconfirm\n            title={\"Are you sure to delete this member?\"}\n            placement=\"left\"\n            onConfirm={() => confirmDelete(row?.id)}\n            onCancel={() => cancelDelete}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            disabled={!row?.canDelete}\n          >\n            <Button\n              icon={<DeleteOutlined />}\n              disabled={!row?.canDelete}\n              danger\n            ></Button>\n          </Popconfirm>\n          <Button\n            icon={<EditOutlined />}\n            disabled={!row?.canEdit}\n            onClick={() => showEditUserModal(row)}\n            danger\n          ></Button>\n          {row.isActive ? (\n            <Popconfirm\n              title=\"Blocking User???\"\n              placement=\"left\"\n              onConfirm={() => blockingUser(row?.id, false)}\n              onCancel={() => {}}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                icon={<LockFilled />}\n                disabled={!row?.canManage}\n                danger\n              ></Button>\n            </Popconfirm>\n          ) : (\n            <Popconfirm\n              title=\"Unblocking User???\"\n              placement=\"left\"\n              onConfirm={() => blockingUser(row?.id, true)}\n              onCancel={() => {}}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                icon={<UnlockFilled />}\n                disabled={!row?.canEdit}\n                danger\n              ></Button>\n            </Popconfirm>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  const getMembers = async (\n    start: number,\n    key: string = \"\",\n    limit: number = 20\n  ) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"users\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n          where: {\n            value: {\n              is_staff: role === \"staff\" ? true : false,\n              is_admin: role === \"adminstrator\" ? true : false,\n              is_active: parseInt(status) === 1 ? true : false,\n            },\n            type: \"JSON\",\n            required: false,\n          },\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: userDataKeys,\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setMembers(data.results);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getMembers(start);\n  }, [params.get(\"status\"), params.get(\"role\")]);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        <Col span={10}>\n          <Form<MembersSearchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setStart(1);\n              members.length = 0;\n              getMembers(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search ...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n\n        <Col span={14} style={{display: \"flex\", justifyContent: \"end\"}}>\n          <Button\n            size=\"large\"\n            icon={<PlusOutlined />}\n            onClick={() => setCreateModal(true)}\n            danger\n          >\n            Create User\n          </Button>\n        </Col>\n      </Row>\n\n      <Table\n        loading={loading}\n        columns={columns}\n        dataSource={members}\n        scroll={{x: true}}\n        pagination={{\n          onChange: (page, pageSize) => {\n            setLimit(pageSize);\n            getMembers(page, searchKey, pageSize);\n          },\n          total: total,\n          pageSize: limit,\n          position: [\"bottomCenter\"],\n          showQuickJumper: true,\n        }}\n      />\n\n      <Modal\n        title=\"Create User Form\"\n        destroyOnClose={true}\n        width={\"50%\"}\n        visible={createModal}\n        onOk={() => setCreateModal(false)}\n        onCancel={() => {\n          form.resetFields();\n          setCreateModal(false);\n        }}\n        footer={[]}\n      >\n        <CreateSystemUserFormComponent form={form} onFinish={onCreate} />\n      </Modal>\n\n      <Modal\n        title=\"Edit User Informations\"\n        destroyOnClose={true}\n        width={\"50%\"}\n        visible={editModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[]}\n      >\n        <EditUserFormComponent\n          form={form}\n          member={member}\n          onFinish={onEditFinish}\n        />\n      </Modal>\n\n      <Modal\n        title=\"Creating LDAP Credentials for User\"\n        destroyOnClose={true}\n        width={\"50%\"}\n        visible={createLdapCredentialsModal}\n        onOk={() => {\n          setMember(null);\n          setCreateLdapCredentialsModal(false);\n        }}\n        onCancel={() => {\n          setMember(null);\n          setCreateLdapCredentialsModal(false);\n        }}\n        footer={[]}\n      >\n        <CreateUserLDAPCredentialsFormComponent\n          member={member}\n          onFinish={onLdapFinish}\n        />\n      </Modal>\n    </>\n  );\n};\n","import {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {UsersComponent} from \"../components/users\";\nimport {ControlLayout} from \"../control_layout\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport {ControlPermitted} from \"../components/permissions/control_permission\";\n\nconst Users: React.FC = () => {\n  return (\n    <div style={{marginTop: 10}}>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to={\"/control/analytics\"}>Home</Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>Users/Members</Breadcrumb.Item>\n      </Breadcrumb>\n      <UsersComponent height={80} />\n    </div>\n  );\n};\n\nexport const ControlUsersPage = () => {\n  useEffect(() => {\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <Users />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["EditUserFormComponent","Input","props","_useState","useState","member","isAdmin","_useState2","_slicedToArray","setIsAdmin","_useState3","isStaff","_useState4","setIsStaff","useEffect","form","setFieldsValue","firstName","middleName","lastName","email","phone","_jsx","_Fragment","children","_jsxs","Form","layout","onFinish","values","parseInt","id","requiredMark","name","label","rules","required","type","message","size","placeholder","Checkbox","defaultChecked","onChange","checked","style","display","justifyContent","Button","htmlType","userDataKeys","CreateSystemUserFormComponent","_useState5","_useState6","ldapAuth","setLdapAuth","onCreate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield","data","wrap","_context","prev","next","gqlDataProvider","url","method","metaData","operation","variables","value","username","password","passwordRepeat","fields","user","sent","success","stop","_x","apply","arguments","maxHeight","overflowY","padding","Tag","color","danger","Paragraph","Typography","CreateUserLDAPCredentialsFormComponent","_props$member","_props$member2","_props$member3","_props$member4","_props$member5","_Form$useForm","userId","passwordConfirm","resetFields","Alert","copyable","fontSize","window","location","origin","moment","add","valueOf","marginTop","_props$member$id","_props$member6","_ref2","getFieldValue","validator","_","Promise","reject","Error","resolve","UsersComponent","setMember","members","setMembers","start","setStart","_useState7","_useState8","total","setTotal","_useState9","_useState10","limit","setLimit","_useState11","_useState12","searchKey","_useState13","_useState14","setHasNext","_useState15","_useState16","loading","setLoading","useNavigation","push","searchForm","_Form$useForm3","_useState17","Grid","lg","_useState18","editModal","setEditModal","_useState19","_useState20","createModal","setCreateModal","_useState21","_useState22","createLdapCredentialsModal","setCreateLdapCredentialsModal","params","URLSearchParams","search","status","get","role","onLdapFinish","onEditFinish","_callee2","_context2","_ref3","_callee3","_context3","concat","_toConsumableArray","_x2","confirmDelete","_ref4","_callee4","_yield2","_context4","toString","filter","_x3","blockingUser","_ref5","_callee5","block","_yield3","_context5","map","_x4","_x5","cancelDelete","columns","title","dataIndex","fixed","render","text","row","index","fullName","ReactTimeAgo","date","Date","created","isActive","icon","AiOutlineLogin","disabled","canEdit","onClick","handleCreateLdapCredentialsModal","Popconfirm","placement","onConfirm","onCancel","okText","cancelText","canDelete","DeleteOutlined","EditOutlined","showEditUserModal","LockFilled","canManage","UnlockFilled","getMembers","_ref6","_callee6","key","_yield4","_args6","_context6","length","undefined","page","pageSize","where","is_staff","is_admin","is_active","results","hasNext","_x6","Row","Col","span","prefix","SearchOutlined","autoComplete","allowClear","PlusOutlined","Table","dataSource","scroll","x","pagination","position","showQuickJumper","Modal","destroyOnClose","width","visible","onOk","footer","Users","Breadcrumb","Link","to","height","ControlUsersPage","history","pushState","urlAppendString","ControlLayout","ControlPermitted"],"sourceRoot":""}