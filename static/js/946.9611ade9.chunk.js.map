{"version":3,"file":"static/js/946.9611ade9.chunk.js","mappings":"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","sources":["apps/control/components/forms/edit_district_form.tsx","apps/control/components/districts_component.tsx","apps/control/pages/districts_page.tsx"],"sourcesContent":["import { Button, Checkbox, Form, Input } from \"@pankod/refine-antd\";\nimport { useEffect, useState } from \"react\";\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n  district?: any;\n}\n\nexport const EditDistrictFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [active, setActive] = useState(props.district.isActive);\n  useEffect(() => {\n    props.form.setFieldsValue({\n      name: props.district.name,\n      isActive: props.district.isActive,\n    });\n  }, [props.form, props.district]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values.isActive = active;\n          values.id = parseInt(props.district.id);\n          props.onFinish(values);\n        }}\n        requiredMark={false}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Name ...\" />\n        </Form.Item>\n\n        <Form.Item name=\"isActive\">\n          <Checkbox checked={active} onChange={() => setActive(!active)}>\n            Active\n          </Checkbox>\n        </Form.Item>\n\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {SearchOutlined, DeleteOutlined, EditOutlined} from \"@ant-design/icons\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Modal,\n  Popconfirm,\n  Table,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Row, Spin} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {DistrictData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {EditDistrictFormComponent} from \"./forms/edit_district_form\";\n\ninterface DistrictsSearchFormData {\n  key: string;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\ninterface districtFormData {\n  name: string;\n}\n\nexport const DistrictsComponent: React.FC<Props> = (props: Props) => {\n  const [district, setDistrict] = useState<DistrictData>();\n  const [districts, setDistricts] = useState<DistrictData[]>([]);\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<DistrictsSearchFormData>();\n  const [form] = Form.useForm<districtFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n  const [editModal, setEditModal] = useState(false);\n\n  const showEditDistrictModal = (district: DistrictData) => {\n    setDistrict(district);\n    setEditModal(true);\n  };\n\n  const handleOk = () => {\n    setEditModal(false);\n  };\n\n  const handleCancel = () => {\n    setEditModal(false);\n  };\n\n  const onEditFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"updateDistrict\",\n        variables: {\n          id: {value: values.id, type: \"Int\", required: true},\n          name: {\n            value: values.name,\n            type: \"String\",\n            required: true,\n          },\n          isActive: {\n            value: values.isActive,\n            type: \"Boolean\",\n            required: true,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            district: [\n              \"id\",\n              \"name\",\n              {\n                region: [\"id\", \"name\"],\n              },\n              \"created\",\n              \"updated\",\n              \"isActive\",\n              \"canDelete\",\n              \"canEdit\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      form.resetFields();\n      setEditModal(false);\n      setDistricts(\n        districts.map((district: DistrictData) => {\n          if (district.id === data.district.id) {\n            return data.district;\n          }\n          return district;\n        })\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const confirmDelete = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"deleteDistrict\",\n        variables: {\n          id: {\n            value: id,\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setDistricts(districts.filter((district) => district.id !== id));\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const cancelDelete = () => {\n    message.info(\"Canceled\");\n  };\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Region\",\n      dataIndex: \"region\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.region.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Created\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => (\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Popconfirm\n            title={\"Are you sure to delete this member?\"}\n            onConfirm={() => confirmDelete(row?.id)}\n            onCancel={() => cancelDelete}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            disabled={!row?.canDelete}\n          >\n            <Button\n              icon={<DeleteOutlined />}\n              disabled={!row?.canDelete}\n            ></Button>\n          </Popconfirm>\n\n          <Button\n            disabled={!row?.canEdit}\n            icon={<EditOutlined />}\n            onClick={() => showEditDistrictModal(row)}\n          ></Button>\n        </div>\n      ),\n    },\n  ];\n\n  const getDistricts = async (start: number, key: string = \"\", limit: number = 20) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"districts\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              \"name\",\n              {\n                region: [\"id\", \"name\"],\n              },\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setDistricts(data.results);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getDistricts(start);\n  }, []);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        <Col span={isMobile ? 24 : 20}>\n          <Form<DistrictsSearchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setStart(1);\n              districts.length = 0;\n              getDistricts(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search ...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n\n      <div>\n        <Table\n          loading={loading}\n          columns={columns}\n          dataSource={districts}\n          scroll={{x: true}}\n          pagination={{\n            onChange: (page, pageSize) => {\n              setLimit(pageSize);\n              getDistricts(page, searchKey, pageSize);\n            },\n            total: total,\n            pageSize: limit,\n            position: [\"bottomCenter\"],\n            showQuickJumper: false,\n          }}\n        />\n      </div>\n\n      <Modal\n        title=\"Edit District Informations\"\n        width={\"20%\"}\n        visible={editModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[]}\n      >\n        <EditDistrictFormComponent\n          form={form}\n          district={district}\n          onFinish={onEditFinish}\n        />\n      </Modal>\n    </>\n  );\n};\n","import {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {DistrictsComponent} from \"../components/districts_component\";\nimport {ControlLayout} from \"../control_layout\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport {ControlPermitted} from \"../components/permissions/control_permission\";\nimport {useGetIdentity} from \"@pankod/refine-core\";\n\nconst Districts: React.FC = () => {\n  return (\n    <div style={{marginTop: 10}}>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to={\"/control/analytics\"}>Home</Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>Districts</Breadcrumb.Item>\n      </Breadcrumb>\n      <DistrictsComponent height={80} />\n    </div>\n  );\n};\n\nexport const ControlDistrictsPage = () => {\n  const {data: user} = useGetIdentity();\n\n  const checkIfUserIsAdmin = () => {\n    if (user?.isStaff === false || user?.isAdmin === false) {\n      window.location.pathname = \"/home\";\n    }\n  };\n  useEffect(() => {\n    checkIfUserIsAdmin();\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <Districts />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["EditDistrictFormComponent","props","useState","district","isActive","active","setActive","useEffect","form","setFieldsValue","name","layout","onFinish","values","id","parseInt","requiredMark","label","rules","required","type","message","size","placeholder","checked","onChange","style","display","justifyContent","htmlType","DistrictsComponent","setDistrict","districts","setDistricts","start","setStart","total","setTotal","limit","setLimit","searchKey","setHasNext","loading","setLoading","useNavigation","push","Form","searchForm","isMobile","Grid","lg","editModal","setEditModal","onEditFinish","gqlDataProvider","url","method","metaData","operation","variables","value","fields","region","data","success","resetFields","map","confirmDelete","filter","cancelDelete","columns","title","dataIndex","fixed","render","text","row","index","ReactTimeAgo","date","Date","created","color","onConfirm","onCancel","okText","cancelText","disabled","canDelete","icon","DeleteOutlined","canEdit","EditOutlined","onClick","showEditDistrictModal","getDistricts","key","page","pageSize","results","hasNext","marginTop","span","length","prefix","SearchOutlined","autoComplete","allowClear","dataSource","scroll","x","pagination","position","showQuickJumper","width","visible","onOk","footer","Districts","to","height","ControlDistrictsPage","user","useGetIdentity","isStaff","isAdmin","window","location","pathname","history","pushState","urlAppendString"],"sourceRoot":""}