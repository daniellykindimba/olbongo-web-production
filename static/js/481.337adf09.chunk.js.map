{"version":3,"file":"static/js/481.337adf09.chunk.js","mappings":"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","sources":["apps/control/components/forms/edit_user_form.tsx","apps/control/components/forms/create_system_user_form.tsx","apps/control/components/forms/create_user_ldap_credentials_form.tsx","apps/control/components/users.tsx","apps/control/pages/users_page.tsx"],"sourcesContent":["import {Button, Checkbox, Form, Input} from \"@pankod/refine-antd\";\nimport {useEffect, useState} from \"react\";\n\nconst {TextArea} = Input;\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n  member?: any;\n}\n\nexport const EditUserFormComponent: React.FC<Props> = (props: Props) => {\n  const [isAdmin, setIsAdmin] = useState(props.member.isAdmin);\n  const [isStaff, setIsStaff] = useState(props.member.isStaff);\n\n  useEffect(() => {\n    props.form.setFieldsValue({\n      firstName: props.member.firstName,\n      middleName: props.member.middleName,\n      lastName: props.member.lastName,\n      email: props.member.email,\n      phone: props.member.phone,\n      isAdmin: props.member.isAdmin,\n      isStaff: props.member.isStaff,\n    });\n  }, [props.form, props.member]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values[\"id\"] = parseInt(props.member.id);\n          values[\"isAdmin\"] = isAdmin;\n          values[\"isStaff\"] = isStaff;\n          props.onFinish(values);\n        }}\n        requiredMark={true}\n      >\n        <Form.Item\n          name=\"firstName\"\n          label=\"First Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input First Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter First Name ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"middleName\"\n          label=\"Middle Name\"\n          rules={[\n            {\n              required: false,\n              type: \"string\",\n              message: \"Please input Middle Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Middle Name ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"lastName\"\n          label=\"Last Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Last Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Last Name ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"email\"\n          label=\"Email\"\n          rules={[\n            {\n              required: false,\n              type: \"email\",\n              message: \"Please input Email Address\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Email Address ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"phone\"\n          label=\"Mobile Phone Number\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Mobile Phone Number ...\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Mobile Phone Number ...\" />\n        </Form.Item>\n\n        <Form.Item name=\"isAdmin\" rules={[{required: false, type: \"boolean\"}]}>\n          <Checkbox\n            defaultChecked={isAdmin}\n            onChange={() => {\n              setIsAdmin(!isAdmin);\n            }}\n          >\n            Admin\n          </Checkbox>\n        </Form.Item>\n\n        <Form.Item name=\"isStaff\" rules={[{required: false, type: \"boolean\"}]}>\n          <Checkbox\n            defaultChecked={isStaff}\n            checked={isStaff}\n            onChange={() => {\n              setIsStaff(!isStaff);\n            }}\n          >\n            Staff\n          </Checkbox>\n        </Form.Item>\n\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","import {Button, Checkbox, Form, Input, Tag, message} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n}\n\nconst userDataKeys = [\n  \"id\",\n  \"firstName\",\n  \"lastName\",\n  \"email\",\n  \"middleName\",\n  \"fullName\",\n  \"phone\",\n  \"pic\",\n  \"username\",\n  \"isActive\",\n  \"isStaff\",\n  \"isAdmin\",\n  \"ldapAuth\",\n  \"created\",\n  \"updated\",\n  \"canEdit\",\n  \"canDelete\",\n  \"canManage\",\n];\n\nexport const CreateSystemUserFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [isStaff, setIsStaff] = useState(false);\n  const [ldapAuth, setLdapAuth] = useState(false);\n\n  const onCreate = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"createUserExtended\",\n        variables: {\n          firstName: {\n            value: values.firstName,\n            type: \"String\",\n            required: true,\n          },\n          middleName: {\n            value: values.middleName,\n            type: \"String\",\n            required: true,\n          },\n          lastName: {value: values.lastName, type: \"String\", required: true},\n          username: {value: values.username, type: \"String\", required: false},\n          email: {value: values.email, type: \"String\", required: !ldapAuth},\n          phone: {value: values.phone, type: \"String\", required: true},\n          password: {\n            value: values.password,\n            type: \"String\",\n            required: !ldapAuth,\n          },\n          passwordRepeat: {\n            value: values.passwordRepeat,\n            type: \"String\",\n            required: !ldapAuth,\n          },\n          isAdmin: {\n            value: values.isAdmin,\n            type: \"Boolean\",\n            required: false,\n          },\n          isStaff: {\n            value: values.isStaff,\n            type: \"Boolean\",\n            required: false,\n          },\n          ldapAuth: {\n            value: values.ldapAuth,\n            type: \"Boolean\",\n            required: false,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            user: userDataKeys,\n          },\n        ],\n      },\n    });\n    if (data.success) {\n      message.success(data.message);\n      props.onFinish(data.user);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  useEffect(() => {}, [props.form]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values[\"isAdmin\"] = isAdmin;\n          values[\"isStaff\"] = isStaff;\n          values[\"ldapAuth\"] = ldapAuth;\n          if (!ldapAuth) {\n            values[\"username\"] = values.email;\n          }\n          onCreate(values);\n        }}\n        requiredMark={true}\n      >\n        <div style={{maxHeight: \"70vh\", overflowY: \"auto\", padding: 20}}>\n          <Form.Item\n            name=\"ldapAuth\"\n            rules={[{required: false, type: \"boolean\"}]}\n          >\n            <Checkbox\n              defaultChecked={ldapAuth}\n              onChange={() => {\n                setLdapAuth(!ldapAuth);\n              }}\n            >\n              LDAP Authentication\n            </Checkbox>\n          </Form.Item>\n          <Form.Item\n            name=\"firstName\"\n            label=\"First Name\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input First Name\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter First Name ...\" />\n          </Form.Item>\n          <Form.Item\n            name=\"middleName\"\n            label=\"Middle Name\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Middle Name\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Middle Name ...\" />\n          </Form.Item>\n          <Form.Item\n            name=\"lastName\"\n            label=\"Last Name\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Last Name\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Last Name ...\" />\n          </Form.Item>\n          <Form.Item\n            name=\"email\"\n            label={\n              <>\n                Email Address\n                {!ldapAuth && <Tag color=\"green\">Username</Tag>}\n              </>\n            }\n            rules={[\n              {\n                required: !ldapAuth,\n                type: \"email\",\n                message: \"Please input Email Address\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Email Address ...\" />\n          </Form.Item>\n\n          {ldapAuth && (\n            <Form.Item\n              name=\"username\"\n              label=\"Username\"\n              rules={[\n                {\n                  required: ldapAuth,\n                  type: \"string\",\n                  message: \"Please input Username ...\",\n                },\n              ]}\n            >\n              <Input size=\"large\" placeholder=\"Enter Username ...\" />\n            </Form.Item>\n          )}\n\n          {!ldapAuth && (\n            <>\n              <Form.Item\n                name=\"password\"\n                label=\"Password\"\n                rules={[\n                  {\n                    required: !ldapAuth,\n                    type: \"string\",\n                    message: \"Please input Password ...\",\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  type=\"password\"\n                  placeholder=\"Enter Password ...\"\n                />\n              </Form.Item>\n\n              <Form.Item\n                name=\"passwordRepeat\"\n                label=\"Password Confirm\"\n                rules={[\n                  {\n                    required: !ldapAuth,\n                    type: \"string\",\n                    message: \"Please input Password Confirm ...\",\n                  },\n                ]}\n              >\n                <Input\n                  size=\"large\"\n                  type=\"password\"\n                  placeholder=\"Enter Password Confirm ...\"\n                />\n              </Form.Item>\n            </>\n          )}\n\n          <Form.Item\n            name=\"phone\"\n            label=\"Mobile Phone\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Mobile Phone\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Email Address ...\" />\n          </Form.Item>\n          <Form.Item\n            name=\"isAdmin\"\n            rules={[{required: false, type: \"boolean\"}]}\n          >\n            <Checkbox\n              defaultChecked={isAdmin}\n              onChange={() => {\n                setIsAdmin(!isAdmin);\n              }}\n            >\n              Admin\n            </Checkbox>\n          </Form.Item>\n          <Form.Item\n            name=\"isStaff\"\n            rules={[{required: false, type: \"boolean\"}]}\n          >\n            <Checkbox\n              defaultChecked={isStaff || ldapAuth}\n              checked={isStaff || ldapAuth}\n              onChange={() => {\n                setIsStaff(!isStaff);\n              }}\n            >\n              Staff\n            </Checkbox>\n          </Form.Item>\n        </div>\n\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Button size=\"large\" htmlType=\"submit\" danger>\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","import {Button, Form, Input, message, Typography} from \"@pankod/refine-antd\";\nimport {Alert} from \"antd\";\nimport {gqlDataProvider} from \"api\";\nimport moment from \"moment\";\nimport {useEffect} from \"react\";\nconst {Paragraph} = Typography;\n\ninterface FormData {\n  userId: number;\n  username: string;\n  password: string;\n  passwordConfirm: string;\n}\n\ninterface Props {\n  onFinish?: any;\n  member?: any;\n}\n\nexport const CreateUserLDAPCredentialsFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [form] = Form.useForm<FormData>();\n\n  const onFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"createLdapCredentials\",\n        variables: {\n          userId: {value: values.userId, type: \"Int\", required: true},\n          username: {\n            value: values.username,\n            type: \"String\",\n            required: false,\n          },\n          password: {\n            value: values.password,\n            type: \"String\",\n            required: false,\n          },\n          passwordConfirm: {\n            value: values.passwordConfirm,\n            type: \"String\",\n            required: false,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      form.resetFields();\n      props.onFinish();\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  useEffect(() => {}, [props.member]);\n\n  return (\n    <>\n      <h2>\n        Copy the link below and send it to the user to create their LDAP\n        credentials\n        <span style={{color: \"red\"}}>Link Expires in 24Hours</span>\n      </h2>\n      {/* a container that contain a link to copy */}\n      <Alert\n        type=\"info\"\n        message={\n          <>\n            <Paragraph copyable style={{fontSize: \"22px\"}}>\n              {\n                window.location.origin + \n                \"/auth/ldap/\" +\n                moment().add(\"h\", 24).valueOf() +\n                \"/\" +\n                props.member?.id +\n                \"/login?fname=\" +\n                props.member?.firstName +\n                \"&lname=\" +\n                props.member?.lastName +\n                \"&mname=\" +\n                props.member?.middleName +\n                \"&email=\" +\n                props.member?.email\n              }\n            </Paragraph>\n          </>\n        }\n      />\n      <div style={{marginTop: 50}}>\n        <Form\n          layout=\"vertical\"\n          form={form}\n          onFinish={(values) => {\n            values.userId = parseInt(props.member?.id ?? \"0\");\n            onFinish(values);\n          }}\n          requiredMark={true}\n        >\n          <Form.Item\n            name=\"username\"\n            label=\"Username\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Username\",\n              },\n            ]}\n          >\n            <Input size=\"large\" placeholder=\"Enter Username ...\" />\n          </Form.Item>\n\n          <Form.Item\n            name=\"password\"\n            label=\"Password\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Password\",\n              },\n            ]}\n          >\n            <Input\n              size=\"large\"\n              type=\"password\"\n              placeholder=\"Enter Password ...\"\n            />\n          </Form.Item>\n\n          <Form.Item\n            name=\"passwordConfirm\"\n            label=\"Confirm Password\"\n            rules={[\n              {\n                required: true,\n                type: \"string\",\n                message: \"Please input Confirm Password\",\n              },\n              // validate password confirm to be equal to password\n              ({getFieldValue}) => ({\n                validator(_, value) {\n                  if (!value || getFieldValue(\"password\") === value) {\n                    return Promise.resolve();\n                  }\n                  return Promise.reject(\n                    new Error(\n                      \"The two passwords that you entered do not match!\"\n                    )\n                  );\n                },\n              }),\n            ]}\n          >\n            <Input\n              size=\"large\"\n              type=\"password\"\n              placeholder=\"Enter Confirm Password ...\"\n            />\n          </Form.Item>\n\n          <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n            <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n              Save\n            </Button>\n          </div>\n        </Form>\n      </div>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  SearchOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  UnlockFilled,\n  LockFilled,\n  PlusOutlined,\n} from \"@ant-design/icons\";\nimport {AiOutlineLogin} from \"react-icons/ai\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Popconfirm,\n  Table,\n  Tag,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Modal, Row} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {UserData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {EditUserFormComponent} from \"./forms/edit_user_form\";\nimport {CreateSystemUserFormComponent} from \"./forms/create_system_user_form\";\nimport {CreateUserLDAPCredentialsFormComponent} from \"./forms/create_user_ldap_credentials_form\";\n\ninterface MembersSearchFormData {\n  key: string;\n}\n\ninterface userFormData {\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  email: string;\n  username: string;\n  isAdmin: boolean;\n  isStaff: boolean;\n  ldapAuth: boolean;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\nconst userDataKeys = [\n  \"id\",\n  \"firstName\",\n  \"lastName\",\n  \"email\",\n  \"middleName\",\n  \"fullName\",\n  \"phone\",\n  \"pic\",\n  \"username\",\n  \"isActive\",\n  \"isStaff\",\n  \"isAdmin\",\n  \"ldapAuth\",\n  \"created\",\n  \"updated\",\n  \"canEdit\",\n  \"canDelete\",\n  \"canManage\",\n];\n\nexport const UsersComponent: React.FC<Props> = (props: Props) => {\n  const [member, setMember] = useState<UserData | any>();\n  const [members, setMembers] = useState<UserData[]>([]);\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<MembersSearchFormData>();\n  const [form] = Form.useForm<userFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n  const [editModal, setEditModal] = useState(false);\n  const [createModal, setCreateModal] = useState(false);\n  const [createLdapCredentialsModal, setCreateLdapCredentialsModal] =\n    useState(false);\n\n  // get query params\n  const params = new URLSearchParams(window.location.search);\n  const status = params.get(\"status\") || \"0\";\n  const role = params.get(\"role\") || \"user\";\n\n  const handleCreateLdapCredentialsModal = (member: UserData) => {\n    setMember(member);\n    setCreateLdapCredentialsModal(true);\n  };\n\n  const showEditUserModal = (member: UserData) => {\n    setMember(member);\n    setEditModal(true);\n  };\n\n  const handleOk = () => {\n    setEditModal(false);\n  };\n\n  const handleCancel = () => {\n    setEditModal(false);\n  };\n\n  const onLdapFinish = async () => {\n    setCreateLdapCredentialsModal(false);\n  };\n\n  const onEditFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"updateUser\",\n        variables: {\n          id: {value: values.id, type: \"Int\", required: true},\n          firstName: {\n            value: values.firstName,\n            type: \"String\",\n            required: false,\n          },\n          middleName: {\n            value: values.middleName,\n            type: \"String\",\n            required: false,\n          },\n          lastName: {value: values.lastName, type: \"String\", required: false},\n          email: {value: values.email, type: \"String\", required: false},\n          phone: {value: values.phone, type: \"String\", required: false},\n          isAdmin: {\n            value: values.isAdmin,\n            type: \"Boolean\",\n            required: false,\n          },\n          isStaff: {\n            value: values.isStaff,\n            type: \"Boolean\",\n            required: false,\n          },\n          ldapAuth: {\n            value: values.ldapAuth,\n            type: \"Boolean\",\n            required: false,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            user: userDataKeys,\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n\n      form.resetFields();\n      setEditModal(false);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const onCreate = async (member: UserData) => {\n    setMembers([member, ...members]);\n    setCreateModal(false);\n  };\n\n  const confirmDelete = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"deleteUser\",\n        variables: {\n          id: {\n            value: parseInt(id.toString()),\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setMembers(members.filter((member) => member.id !== id));\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const blockingUser = async (id: number, block: boolean) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"blockUnblockUser\",\n        variables: {\n          id: {\n            value: parseInt(id.toString()),\n            type: \"Int\",\n            required: true,\n          },\n          block: {\n            value: block,\n            type: \"Boolean\",\n            required: true,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            user: userDataKeys,\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setMembers(\n        members.map((member) => {\n          if (member.id === id) {\n            return data.user;\n          }\n          return member;\n        })\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const cancelDelete = () => {\n    message.info(\"Canceled\");\n  };\n\n  const columns = [\n    {\n      title: \"Full Name\",\n      dataIndex: \"full_name\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.fullName}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Username\",\n      dataIndex: \"username\",\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.username}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Email\",\n      dataIndex: \"email\",\n      render: (text: any, row: any, index: any) => (\n        <span>\n          {row.email && <Tag color=\"green\">{row.email}</Tag>}\n          {row.phone && <Tag color=\"green\">{row.phone}</Tag>}\n        </span>\n      ),\n    },\n    {\n      title: \"LDAP Auth\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            {row.ldapAuth ? (\n              <Tag color=\"green\">Yes</Tag>\n            ) : (\n              <Tag color=\"red\">No</Tag>\n            )}\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Date Joined\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => (\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          {row.ldapAuth && (\n            <Button\n              icon={<AiOutlineLogin />}\n              disabled={!row?.canEdit}\n              onClick={() => handleCreateLdapCredentialsModal(row)}\n              danger\n            ></Button>\n          )}\n          <Popconfirm\n            title={\"Are you sure to delete this member?\"}\n            placement=\"left\"\n            onConfirm={() => confirmDelete(row?.id)}\n            onCancel={() => cancelDelete}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            disabled={!row?.canDelete}\n          >\n            <Button\n              icon={<DeleteOutlined />}\n              disabled={!row?.canDelete}\n              danger\n            ></Button>\n          </Popconfirm>\n          <Button\n            icon={<EditOutlined />}\n            disabled={!row?.canEdit}\n            onClick={() => showEditUserModal(row)}\n            danger\n          ></Button>\n          {row.isActive ? (\n            <Popconfirm\n              title=\"Blocking User???\"\n              placement=\"left\"\n              onConfirm={() => blockingUser(row?.id, false)}\n              onCancel={() => {}}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                icon={<LockFilled />}\n                disabled={!row?.canManage}\n                danger\n              ></Button>\n            </Popconfirm>\n          ) : (\n            <Popconfirm\n              title=\"Unblocking User???\"\n              placement=\"left\"\n              onConfirm={() => blockingUser(row?.id, true)}\n              onCancel={() => {}}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button\n                icon={<UnlockFilled />}\n                disabled={!row?.canEdit}\n                danger\n              ></Button>\n            </Popconfirm>\n          )}\n        </div>\n      ),\n    },\n  ];\n\n  const getMembers = async (\n    start: number,\n    key: string = \"\",\n    limit: number = 20\n  ) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"users\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n          where: {\n            value: {\n              is_staff: role === \"staff\" ? true : false,\n              is_admin: role === \"adminstrator\" ? true : false,\n              is_active: parseInt(status) === 1 ? true : false,\n            },\n            type: \"JSON\",\n            required: false,\n          },\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: userDataKeys,\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setMembers(data.results);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getMembers(start);\n  }, [params.get(\"status\"), params.get(\"role\")]);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        <Col span={10}>\n          <Form<MembersSearchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setStart(1);\n              members.length = 0;\n              getMembers(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search ...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n\n        <Col span={14} style={{display: \"flex\", justifyContent: \"end\"}}>\n          <Button\n            size=\"large\"\n            icon={<PlusOutlined />}\n            onClick={() => setCreateModal(true)}\n            danger\n          >\n            Create User\n          </Button>\n        </Col>\n      </Row>\n\n      <Table\n        loading={loading}\n        columns={columns}\n        dataSource={members}\n        scroll={{x: true}}\n        pagination={{\n          onChange: (page, pageSize) => {\n            setLimit(pageSize);\n            getMembers(page, searchKey, pageSize);\n          },\n          total: total,\n          pageSize: limit,\n          position: [\"bottomCenter\"],\n          showQuickJumper: true,\n        }}\n      />\n\n      <Modal\n        title=\"Create User Form\"\n        destroyOnClose={true}\n        width={\"50%\"}\n        visible={createModal}\n        onOk={() => setCreateModal(false)}\n        onCancel={() => {\n          form.resetFields();\n          setCreateModal(false);\n        }}\n        footer={[]}\n      >\n        <CreateSystemUserFormComponent form={form} onFinish={onCreate} />\n      </Modal>\n\n      <Modal\n        title=\"Edit User Informations\"\n        destroyOnClose={true}\n        width={\"50%\"}\n        visible={editModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[]}\n      >\n        <EditUserFormComponent\n          form={form}\n          member={member}\n          onFinish={onEditFinish}\n        />\n      </Modal>\n\n      <Modal\n        title=\"Creating LDAP Credentials for User\"\n        destroyOnClose={true}\n        width={\"50%\"}\n        visible={createLdapCredentialsModal}\n        onOk={() => {\n          setMember(null);\n          setCreateLdapCredentialsModal(false);\n        }}\n        onCancel={() => {\n          setMember(null);\n          setCreateLdapCredentialsModal(false);\n        }}\n        footer={[]}\n      >\n        <CreateUserLDAPCredentialsFormComponent\n          member={member}\n          onFinish={onLdapFinish}\n        />\n      </Modal>\n    </>\n  );\n};\n","import {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {UsersComponent} from \"../components/users\";\nimport {ControlLayout} from \"../control_layout\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport {ControlPermitted} from \"../components/permissions/control_permission\";\n\nconst Users: React.FC = () => {\n  return (\n    <div style={{marginTop: 10}}>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to={\"/control/analytics\"}>Home</Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>Users/Members</Breadcrumb.Item>\n      </Breadcrumb>\n      <UsersComponent height={80} />\n    </div>\n  );\n};\n\nexport const ControlUsersPage = () => {\n  useEffect(() => {\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <Users />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["EditUserFormComponent","Input","props","useState","member","isAdmin","setIsAdmin","isStaff","setIsStaff","useEffect","form","setFieldsValue","firstName","middleName","lastName","email","phone","layout","onFinish","values","parseInt","id","requiredMark","name","label","rules","required","type","message","size","placeholder","defaultChecked","onChange","checked","style","display","justifyContent","htmlType","userDataKeys","CreateSystemUserFormComponent","ldapAuth","setLdapAuth","onCreate","gqlDataProvider","url","method","metaData","operation","variables","value","username","password","passwordRepeat","fields","user","data","success","maxHeight","overflowY","padding","color","danger","Paragraph","Typography","CreateUserLDAPCredentialsFormComponent","Form","userId","passwordConfirm","resetFields","copyable","fontSize","window","location","origin","moment","add","valueOf","marginTop","getFieldValue","validator","_","Promise","reject","Error","resolve","UsersComponent","setMember","members","setMembers","start","setStart","total","setTotal","limit","setLimit","searchKey","setHasNext","loading","setLoading","useNavigation","push","searchForm","Grid","lg","editModal","setEditModal","createModal","setCreateModal","createLdapCredentialsModal","setCreateLdapCredentialsModal","params","URLSearchParams","search","status","get","role","onLdapFinish","onEditFinish","confirmDelete","toString","filter","blockingUser","block","map","cancelDelete","columns","title","dataIndex","fixed","render","text","row","index","fullName","ReactTimeAgo","date","Date","created","isActive","icon","disabled","canEdit","onClick","handleCreateLdapCredentialsModal","placement","onConfirm","onCancel","okText","cancelText","canDelete","DeleteOutlined","EditOutlined","showEditUserModal","LockFilled","canManage","UnlockFilled","getMembers","key","page","pageSize","where","is_staff","is_admin","is_active","results","hasNext","span","length","prefix","SearchOutlined","autoComplete","allowClear","PlusOutlined","dataSource","scroll","x","pagination","position","showQuickJumper","destroyOnClose","width","visible","onOk","footer","Users","to","height","ControlUsersPage","history","pushState","urlAppendString"],"sourceRoot":""}