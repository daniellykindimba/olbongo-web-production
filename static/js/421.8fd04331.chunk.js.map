{"version":3,"file":"static/js/421.8fd04331.chunk.js","mappings":"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","sources":["apps/control/components/forms/edit_ward_form.tsx","apps/control/components/wards_component.tsx","apps/control/pages/wards_page.tsx"],"sourcesContent":["import { Button, Checkbox, Form, Input } from \"@pankod/refine-antd\";\nimport { useEffect, useState } from \"react\";\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n  ward?: any;\n}\n\nexport const EditWardFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [active, setActive] = useState(props.ward.isActive);\n  useEffect(() => {\n    props.form.setFieldsValue({\n      name: props.ward.name,\n      isActive: props.ward.isActive,\n    });\n  }, [props.form, props.ward]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values.isActive = active;\n          values.id = parseInt(props.ward.id);\n          props.onFinish(values);\n        }}\n        requiredMark={false}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Name ...\" />\n        </Form.Item>\n\n        <Form.Item name=\"isActive\">\n          <Checkbox checked={active} onChange={() => setActive(!active)}>\n            Active\n          </Checkbox>\n        </Form.Item>\n\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {SearchOutlined, DeleteOutlined, EditOutlined} from \"@ant-design/icons\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Popconfirm,\n  Table,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Modal, Row, Spin, Tooltip} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {WardData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {EditWardFormComponent} from \"./forms/edit_ward_form\";\n\ninterface WardsSearchFormData {\n  key: string;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\ninterface wardFormData {\n  name: string;\n}\n\nexport const WardsComponent: React.FC<Props> = (props: Props) => {\n  const [ward, setWard] = useState<WardData>();\n  const [wards, setWards] = useState<WardData[]>([]);\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<WardsSearchFormData>();\n  const [form] = Form.useForm<wardFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n\n  const [editModal, setEditModal] = useState(false);\n\n  const showEditWardModal = (ward: WardData) => {\n    setWard(ward);\n    setEditModal(true);\n  };\n\n  const handleOk = () => {\n    setEditModal(false);\n  };\n\n  const handleCancel = () => {\n    setEditModal(false);\n  };\n\n  const onEditFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"updateWard\",\n        variables: {\n          id: {value: values.id, type: \"Int\", required: true},\n          name: {\n            value: values.name,\n            type: \"String\",\n            required: true,\n          },\n          isActive: {\n            value: values.isActive,\n            type: \"Boolean\",\n            required: true,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            ward: [\n              \"id\",\n              \"name\",\n              {\n                district: [\n                  \"id\",\n                  \"name\",\n                  {\n                    region: [\"id\", \"name\"],\n                  },\n                ],\n              },\n              \"created\",\n              \"updated\",\n              \"isActive\",\n              \"canDelete\",\n              \"canEdit\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      form.resetFields();\n      setEditModal(false);\n      setWards(\n        wards.map((ward: WardData) => {\n          if (ward.id === data.ward.id) {\n            return data.ward;\n          }\n          return ward;\n        })\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const confirmDelete = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"deleteWard\",\n        variables: {\n          id: {\n            value: parseInt(id.toString()),\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setWards(wards.filter((ward) => ward.id !== id));\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const cancelDelete = () => {\n    message.info(\"Canceled\");\n  };\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"District\",\n      dataIndex: \"district\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.district.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Region\",\n      dataIndex: \"region\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.district.region.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Created\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => (\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Popconfirm\n            title={\"Are you sure to delete this Ward?\"}\n            onConfirm={() => confirmDelete(row?.id)}\n            onCancel={() => cancelDelete}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            disabled={!row?.canDelete}\n          >\n            <Button\n              icon={<DeleteOutlined />}\n              disabled={!row?.canDelete}\n            ></Button>\n          </Popconfirm>\n\n          <Tooltip title={\"Edit \" + row?.name + \" Ward\"} color={\"green\"}>\n            <Button\n              icon={<EditOutlined />}\n              disabled={!row?.canEdit}\n              onClick={() => showEditWardModal(row)}\n            ></Button>\n          </Tooltip>\n        </div>\n      ),\n    },\n  ];\n\n  const getWards = async (\n    start: number,\n    key: string = \"\",\n    limit: number = 20\n  ) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"wards\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              \"name\",\n              {\n                district: [\n                  \"id\",\n                  \"name\",\n                  {\n                    region: [\"id\", \"name\"],\n                  },\n                ],\n              },\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setWards(data.results);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getWards(start);\n  }, []);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        <Col span={isMobile ? 24 : 20}>\n          <Form<WardsSearchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setStart(1);\n              wards.length = 0;\n              getWards(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search ...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n\n      <div>\n        <Table\n          loading={loading}\n          columns={columns}\n          dataSource={wards}\n          scroll={{x: true}}\n          pagination={{\n            onChange: (page, pageSize) => {\n              setLimit(pageSize);\n              getWards(page, searchKey, pageSize);\n            },\n            total: total,\n            pageSize: limit,\n            position: [\"bottomCenter\"],\n            showQuickJumper: true,\n          }}\n        />\n      </div>\n\n      <Modal\n        title=\"Edit Ward Informations\"\n        width={\"20%\"}\n        visible={editModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[]}\n      >\n        <EditWardFormComponent\n          form={form}\n          ward={ward}\n          onFinish={onEditFinish}\n        />\n      </Modal>\n    </>\n  );\n};\n","import {Authenticated, LayoutWrapper} from \"@pankod/refine-core\";\nimport {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {WardsComponent} from \"../components/wards_component\";\nimport {ControlLayout} from \"../control_layout\";\nimport {ControlHeader} from \"../header\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport { ControlPermitted } from \"../components/permissions/control_permission\";\n\nconst Wards: React.FC = () => {\n  return (\n    <div style={{marginTop: 10}}>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to={\"/control/analytics\"}>Home</Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>Wards</Breadcrumb.Item>\n      </Breadcrumb>\n      <WardsComponent height={80} />\n    </div>\n  );\n};\n\nexport const WardsPage = () => {\n  useEffect(() => {\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <Wards />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["EditWardFormComponent","props","_useState","useState","ward","isActive","_useState2","_slicedToArray","active","setActive","useEffect","form","setFieldsValue","name","_jsx","_Fragment","children","_jsxs","Form","layout","onFinish","values","id","parseInt","requiredMark","label","rules","required","type","message","Input","size","placeholder","Checkbox","checked","onChange","style","display","justifyContent","Button","htmlType","WardsComponent","setWard","_useState3","_useState4","wards","setWards","_useState5","_useState6","start","setStart","_useState7","_useState8","total","setTotal","_useState9","_useState10","limit","setLimit","_useState11","_useState12","searchKey","_useState13","_useState14","setHasNext","_useState15","_useState16","loading","setLoading","_Form$useForm","useNavigation","push","searchForm","_Form$useForm3","isMobile","Grid","lg","_useState17","_useState18","editModal","setEditModal","onEditFinish","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield","data","wrap","_context","prev","next","gqlDataProvider","url","method","metaData","operation","variables","value","fields","district","region","sent","success","resetFields","map","stop","_x","apply","arguments","confirmDelete","_ref2","_callee2","_yield2","_context2","toString","filter","_x2","cancelDelete","columns","title","dataIndex","fixed","render","text","row","index","ReactTimeAgo","date","Date","created","color","Popconfirm","onConfirm","onCancel","okText","cancelText","disabled","canDelete","icon","DeleteOutlined","Tooltip","EditOutlined","canEdit","onClick","showEditWardModal","getWards","_ref3","_callee3","key","_yield3","_args3","_context3","length","undefined","page","pageSize","results","hasNext","_x3","Row","marginTop","Col","span","prefix","SearchOutlined","autoComplete","allowClear","Table","dataSource","scroll","x","pagination","position","showQuickJumper","Modal","width","visible","onOk","footer","Wards","Breadcrumb","Link","to","height","WardsPage","window","history","pushState","urlAppendString","ControlLayout","ControlPermitted"],"sourceRoot":""}