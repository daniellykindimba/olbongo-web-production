{"version":3,"file":"static/js/675.d406cf16.chunk.js","mappings":"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","sources":["apps/control/components/forms/edit_syllabus_type_form.tsx","apps/control/components/syllabus_types_component.tsx","apps/control/pages/syllabus_types_page.tsx"],"sourcesContent":["import {Button, Checkbox, Form, Input} from \"@pankod/refine-antd\";\nimport {useEffect, useState} from \"react\";\n\nconst {TextArea} = Input;\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n  syllabusType?: any;\n}\n\nexport const EditSyllabusTypeFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [active, setActive] = useState(props.syllabusType.isActive);\n  useEffect(() => {\n    props.form.setFieldsValue({\n      name: props.syllabusType.name,\n      description: props.syllabusType.description,\n      isActive: props.syllabusType.isActive,\n    });\n  }, [props.form, props.syllabusType]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values.isActive = active;\n          values.id = parseInt(props.syllabusType.id);\n          props.onFinish(values);\n        }}\n        requiredMark={false}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Name ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"description\"\n          label=\"Description\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Name\",\n            },\n          ]}\n        >\n          <TextArea rows={4} placeholder=\"Please write Description ...\" />\n        </Form.Item>\n\n        <Form.Item name=\"isActive\">\n          <Checkbox checked={active} onChange={() => setActive(!active)}>\n            Active\n          </Checkbox>\n        </Form.Item>\n\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  SearchOutlined,\n  DeleteOutlined,\n  EditOutlined,\n  SyncOutlined,\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Modal,\n  Popconfirm,\n  Table,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Row} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {useEffect, useState} from \"react\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {SyllabusTypeData} from \"apps/syllabus/interfaces\";\nimport {EditSyllabusTypeFormComponent} from \"./forms/edit_syllabus_type_form\";\n\ninterface DistrictsSearchFormData {\n  key: string;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\ninterface districtFormData {\n  name: string;\n}\n\nexport const SyllabusTypesComponent: React.FC<Props> = (props: Props) => {\n  const [syllabustype, setSyllabustype] = useState<SyllabusTypeData>();\n  const [syllabustypes, setSyllabustypes] = useState<SyllabusTypeData[]>([]);\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<DistrictsSearchFormData>();\n  const [form] = Form.useForm<districtFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n  const [editModal, setEditModal] = useState(false);\n\n  const showEditSyllabusTypeModal = (syllabustype: SyllabusTypeData) => {\n    setSyllabustype(syllabustype);\n    setEditModal(true);\n  };\n\n  const handleOk = () => {\n    setEditModal(false);\n  };\n\n  const handleCancel = () => {\n    setEditModal(false);\n  };\n\n  const onEditFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"updateSyllabusType\",\n        variables: {\n          id: {value: values.id, type: \"Int\", required: true},\n          name: {\n            value: values.name,\n            type: \"String\",\n            required: true,\n          },\n          description: {\n            value: values.description,\n            type: \"String\",\n            required: false,\n          },\n          isActive: {\n            value: values.isActive,\n            type: \"Boolean\",\n            required: false\n          }\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            syllabusType: [\n              \"id\",\n              \"name\",\n              \"description\",\n              \"created\",\n              \"updated\",\n              \"isActive\",\n              \"canDelete\",\n              \"canEdit\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      form.resetFields();\n      setEditModal(false);\n      setSyllabustypes(\n        syllabustypes.map((syllabustype: SyllabusTypeData) => {\n          if (syllabustype.id === data.syllabusType.id) {\n            return data.syllabusType;\n          }\n          return syllabustype;\n        })\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const confirmDelete = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"deleteSyllabusType\",\n        variables: {\n          id: {\n            value: id,\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setSyllabustypes(\n        syllabustypes.filter((syllabustype) => syllabustype.id !== id)\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const sync = async () => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"synchronizeDefaultSyllabusTypes\",\n        variables: {},\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      getSyllabusTypes(1);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const cancelDelete = () => {\n    message.info(\"Canceled\");\n  };\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Description\",\n      dataIndex: \"description\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.description}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Created\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => (\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Popconfirm\n            title={\"Are you sure to delete this Syllabus Type?\"}\n            onConfirm={() => confirmDelete(row?.id)}\n            onCancel={() => cancelDelete}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            disabled={!row?.canDelete}\n          >\n            <Button\n              icon={<DeleteOutlined />}\n              disabled={!row?.canDelete}\n            ></Button>\n          </Popconfirm>\n\n          <Button\n            disabled={!row?.canEdit}\n            icon={<EditOutlined />}\n            onClick={() => showEditSyllabusTypeModal(row)}\n          ></Button>\n        </div>\n      ),\n    },\n  ];\n\n  const getSyllabusTypes = async (\n    start: number,\n    key: string = \"\",\n    limit: number = 20\n  ) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"syllabusTypes\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              \"name\",\n              \"description\",\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setSyllabustypes(data.results);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getSyllabusTypes(start);\n  }, []);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        <Col span={12}>\n          <Form<DistrictsSearchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setStart(1);\n              syllabustypes.length = 0;\n              getSyllabusTypes(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search ...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n        <Col span={12} style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Popconfirm\n            title=\"Are you sure to sync default syllabus types?\"\n            placement=\"left\"\n            onConfirm={() => {\n              sync();\n            }}\n            onCancel={() => {}}\n            okText=\"Yes\"\n            cancelText=\"No\"\n          >\n            <Button icon={<SyncOutlined />} size=\"large\">\n              Sync Default Syllabus Types\n            </Button>\n          </Popconfirm>\n        </Col>\n      </Row>\n\n      <div>\n        <Table\n          loading={loading}\n          columns={columns}\n          dataSource={syllabustypes}\n          scroll={{x: true}}\n          pagination={{\n            onChange: (page, pageSize) => {\n              setLimit(pageSize);\n              getSyllabusTypes(page, searchKey, pageSize);\n            },\n            total: total,\n            pageSize: limit,\n            position: [\"bottomCenter\"],\n            showQuickJumper: false,\n          }}\n        />\n      </div>\n\n      <Modal\n        title=\"Edit Syllabus Type Informations\"\n        width={\"45vw\"}\n        visible={editModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[]}\n      >\n        <EditSyllabusTypeFormComponent\n          form={form}\n          syllabusType={syllabustype}\n          onFinish={onEditFinish}\n        />\n      </Modal>\n    </>\n  );\n};\n","import {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {SyllabusTypesComponent} from \"../components/syllabus_types_component\";\nimport {ControlLayout} from \"../control_layout\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport {ControlPermitted} from \"../components/permissions/control_permission\";\n\nconst SyllabusTypes: React.FC = () => {\n  return (\n    <>\n      <div style={{marginTop: 10, marginBottom: 10}}>\n        <Breadcrumb>\n          <Breadcrumb.Item>\n            <Link to={\"/control/analytics\"}>Home</Link>\n          </Breadcrumb.Item>\n          <Breadcrumb.Item>Syllabus Types</Breadcrumb.Item>\n        </Breadcrumb>\n      </div>\n      <SyllabusTypesComponent height={80} />\n    </>\n  );\n};\n\nexport const SyllabusTypesPage = () => {\n  useEffect(() => {\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <SyllabusTypes />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["TextArea","Input","EditSyllabusTypeFormComponent","props","useState","syllabusType","isActive","active","setActive","useEffect","form","setFieldsValue","name","description","layout","onFinish","values","id","parseInt","requiredMark","label","rules","required","type","message","size","placeholder","rows","checked","onChange","style","display","justifyContent","htmlType","SyllabusTypesComponent","syllabustype","setSyllabustype","syllabustypes","setSyllabustypes","start","setStart","total","setTotal","limit","setLimit","searchKey","setHasNext","loading","setLoading","useNavigation","push","Form","searchForm","Grid","lg","editModal","setEditModal","onEditFinish","gqlDataProvider","url","method","metaData","operation","variables","value","fields","data","success","resetFields","map","confirmDelete","filter","sync","getSyllabusTypes","cancelDelete","columns","title","dataIndex","fixed","render","text","row","index","ReactTimeAgo","date","Date","created","color","onConfirm","onCancel","okText","cancelText","disabled","canDelete","icon","DeleteOutlined","canEdit","EditOutlined","onClick","showEditSyllabusTypeModal","key","page","pageSize","results","hasNext","marginTop","span","length","prefix","SearchOutlined","autoComplete","allowClear","placement","SyncOutlined","dataSource","scroll","x","pagination","position","showQuickJumper","width","visible","onOk","footer","SyllabusTypes","marginBottom","to","height","SyllabusTypesPage","window","history","pushState","urlAppendString"],"sourceRoot":""}