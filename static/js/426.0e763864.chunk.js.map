{"version":3,"file":"static/js/426.0e763864.chunk.js","mappings":"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","sources":["apps/control/components/adding_combinations_subjects_component.tsx","apps/control/components/combination_subjects_list_component.tsx","apps/control/components/forms/edit_combination_form.tsx","apps/control/components/combinations_component.tsx","apps/control/pages/combinations_page.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {\n  PlusCircleFilled,\n  PlusOutlined,\n  SearchOutlined,\n} from \"@ant-design/icons\";\nimport {Form, Spin, Button, Tag} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Avatar, Row, Col, Input, message, Modal, Popconfirm, List} from \"antd\";\nimport {gqlDataProvider} from \"api\";\nimport {CombinationData, SubjectData, UserData} from \"apps/core/interfaces\";\nimport {FileData} from \"apps/odrive/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\ninterface Props {\n  randKey?: any;\n  onAdd?: any;\n  combination?: CombinationData;\n}\n\ninterface searchFormData {\n  key: string;\n}\n\nexport const AddingCombinationSubjectsComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [subjects, setSubjects] = useState<SubjectData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [start, setStart] = useState(1);\n  const [limit, setLimit] = useState(25);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [searchForm] = Form.useForm<searchFormData>();\n  const [pages, setPages] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [hasNext, setHasNext] = useState(true);\n  const {push} = useNavigation();\n\n  const addCombinationSubject = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"addCombinationSubject\",\n        variables: {\n          combinationId: {\n            value: parseInt(\n              props.combination?.id ? props.combination?.id.toString() : \"0\"\n            ),\n            type: \"Int\",\n            required: true,\n          },\n          subjectId: {\n            value: parseInt(id ? id.toString() : \"0\"),\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            combination: [\n              \"id\",\n              \"name\",\n              \"code\",\n              \"description\",\n              {\n                subjects: [\"id\", \"name\"],\n              },\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    if (data.success) {\n      message.success(data.message);\n      subjects.length = 0;\n      setSubjects([]);\n      getSubjects(1, searchKey);\n      props.onAdd(data.combination);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const getSubjects = async (start: number, key: string = \"\") => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"combinationSubjectsToAdd\",\n        variables: {\n          combinationId: {\n            value: parseInt(\n              props.combination?.id ? props.combination?.id.toString() : \"0\"\n            ),\n            type: \"Int\",\n            required: true,\n          },\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              \"name\",\n              \"description\",\n              {\n                schoolType: [\"id\", \"name\"],\n              },\n              \"created\",\n              \"updated\",\n              \"isActive\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setHasNext(data.hasNext);\n    setStart(data.page + 1);\n    setSubjects([...subjects, ...data.results]);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    subjects.length = 0;\n    setSubjects([]);\n    getSubjects(1);\n  }, [props.randKey, props.combination]);\n\n  return (\n    <>\n      <Row>\n        <Col span={24}>\n          <Form<searchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setSearchKey(values.key);\n              subjects.length = 0;\n              setSubjects([]);\n              getSubjects(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search Adminstrator(s)...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n\n      <Spin spinning={loading}>\n        <div\n          id=\"scrollableAdminstratorDiv\"\n          style={{maxHeight: \"60vh\", overflowY: \"auto\"}}\n        >\n          <InfiniteScroll\n            dataLength={total}\n            next={() => getSubjects(start, searchKey)}\n            hasMore={hasNext}\n            scrollableTarget=\"scrollableAdminstratorDiv\"\n            loader={\n              <>\n                {subjects.length > 0 ? (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      marginTop: 10,\n                    }}\n                  >\n                    <Spin></Spin>\n                  </div>\n                ) : (\n                  <></>\n                )}\n              </>\n            }\n            endMessage={\n              <p\n                style={{\n                  textAlign: \"center\",\n                  display: subjects.length > 0 ? \"block\" : \"none\",\n                }}\n              >\n                <b>Yay! You have seen it all</b>\n              </p>\n            }\n          >\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={subjects}\n              renderItem={(item) => (\n                <div\n                  style={{\n                    background: \"white\",\n                    marginBottom: 5,\n                    paddingLeft: 10,\n                    paddingTop: 10,\n                  }}\n                >\n                  <List.Item\n                    key={\"file-\" + item.id}\n                    style={{margin: 0, padding: 0}}\n                    actions={[\n                      <Popconfirm\n                        placement=\"topLeft\"\n                        title={\n                          \"Adding \" +\n                          item.name +\n                          \" to \" +\n                          props.combination?.name +\n                          \"?\"\n                        }\n                        onConfirm={() => addCombinationSubject(item.id)}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                      >\n                        <Button icon={<PlusOutlined />}></Button>\n                      </Popconfirm>,\n                    ]}\n                  >\n                    <List.Item.Meta\n                      title={\n                        <a>\n                          {item.name}\n                          <Tag color=\"green\" style={{marginLeft: 10}}>\n                            {item.schoolType.name}\n                          </Tag>\n                        </a>\n                      }\n                    />\n                  </List.Item>\n                </div>\n              )}\n            />\n          </InfiniteScroll>\n        </div>\n      </Spin>\n    </>\n  );\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport {\n  DeleteOutlined,\n  PlusCircleFilled,\n  PlusOutlined,\n  SearchOutlined,\n} from \"@ant-design/icons\";\nimport {Form, Spin, Button, Tag} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Avatar, Row, Col, Input, message, Modal, Popconfirm, List} from \"antd\";\nimport {gqlDataProvider} from \"api\";\nimport {\n  CombinationData,\n  CombinationSubjectData,\n  SubjectData,\n  UserData,\n} from \"apps/core/interfaces\";\nimport {FileData} from \"apps/odrive/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\ninterface Props {\n  randKey?: any;\n  onAdd?: any;\n  combination?: CombinationData;\n}\n\ninterface searchFormData {\n  key: string;\n}\n\nexport const CombinationSubjectsListComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [subjects, setSubjects] = useState<CombinationSubjectData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [start, setStart] = useState(1);\n  const [limit, setLimit] = useState(25);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [searchForm] = Form.useForm<searchFormData>();\n  const [pages, setPages] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [hasNext, setHasNext] = useState(true);\n  const {push} = useNavigation();\n\n  const removeCombinationSubject = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"removeCombinationSubject\",\n        variables: {\n          combinationSubjectId: {\n            value: id,\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            combination: [\n              \"id\",\n              \"name\",\n              \"code\",\n              \"description\",\n              {\n                subjects: [\"id\", \"name\"],\n              },\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    if (data.success) {\n      message.success(data.message);\n      subjects.length = 0;\n      setSubjects([]);\n      getSubjects(1, searchKey);\n      props.onAdd(data.combination);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const getSubjects = async (start: number, key: string = \"\") => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"combinationSubjects\",\n        variables: {\n          combinationId: {\n            value: parseInt(\n              props.combination?.id ? props.combination?.id.toString() : \"0\"\n            ),\n            type: \"Int\",\n            required: true,\n          },\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              {\n                combination: [\"id\", \"name\", \"code\"],\n              },\n              {\n                subject: [\n                  \"id\",\n                  \"name\",\n                  {\n                    schoolType: [\"id\", \"name\"],\n                  },\n                ],\n              },\n              \"created\",\n              \"updated\",\n              \"isActive\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setHasNext(data.hasNext);\n    setStart(data.page + 1);\n    setSubjects([...subjects, ...data.results]);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    subjects.length = 0;\n    setSubjects([]);\n    getSubjects(1);\n  }, [props.randKey, props.combination]);\n\n  return (\n    <>\n      <Row>\n        <Col span={24}>\n          <Form<searchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setSearchKey(values.key);\n              subjects.length = 0;\n              setSubjects([]);\n              getSubjects(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search Adminstrator(s)...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n\n      <Spin spinning={loading}>\n        <div\n          id=\"scrollableAdminstratorDiv\"\n          style={{maxHeight: \"60vh\", overflowY: \"auto\"}}\n        >\n          <InfiniteScroll\n            dataLength={total}\n            next={() => getSubjects(start, searchKey)}\n            hasMore={hasNext}\n            scrollableTarget=\"scrollableAdminstratorDiv\"\n            loader={\n              <>\n                {subjects.length > 0 ? (\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      marginTop: 10,\n                    }}\n                  >\n                    <Spin></Spin>\n                  </div>\n                ) : (\n                  <></>\n                )}\n              </>\n            }\n            endMessage={\n              <p\n                style={{\n                  textAlign: \"center\",\n                  display: subjects.length > 0 ? \"block\" : \"none\",\n                }}\n              >\n                <b>Yay! You have seen it all</b>\n              </p>\n            }\n          >\n            <List\n              itemLayout=\"horizontal\"\n              dataSource={subjects}\n              renderItem={(item) => (\n                <div\n                  style={{\n                    background: \"white\",\n                    marginBottom: 5,\n                    paddingLeft: 10,\n                    paddingTop: 10,\n                  }}\n                >\n                  <List.Item\n                    key={\"file-\" + item.id}\n                    style={{margin: 0, padding: 0}}\n                    actions={[\n                      <Popconfirm\n                        placement=\"topLeft\"\n                        title={\n                          \"Removing \" +\n                          item.subject.name +\n                          \" to \" +\n                          props.combination?.name +\n                          \"?\"\n                        }\n                        onConfirm={() => removeCombinationSubject(item.id)}\n                        okText=\"Yes\"\n                        cancelText=\"No\"\n                      >\n                        <Button icon={<DeleteOutlined />}></Button>\n                      </Popconfirm>,\n                    ]}\n                  >\n                    <List.Item.Meta\n                      title={\n                        <a>\n                          {item.subject.name}\n                          <Tag color=\"green\" style={{marginLeft: 10}}>\n                            {item.subject.schoolType.name}\n                          </Tag>\n                        </a>\n                      }\n                    />\n                  </List.Item>\n                </div>\n              )}\n            />\n          </InfiniteScroll>\n        </div>\n      </Spin>\n    </>\n  );\n};\n","import {Button, Checkbox, Form, Input, message} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {CombinationData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\n\ninterface Props {\n  onFinish?: any;\n  combination: CombinationData;\n}\n\ninterface CombinationFormData {\n  combination_id: number;\n  name: string;\n  code: string;\n  description: string;\n  is_active: boolean;\n}\n\nexport const EditCombinationFormComponent: React.FC<Props> = (props: Props) => {\n  const [active, setActive] = useState(props.combination.isActive);\n  const [form] = Form.useForm<CombinationFormData>();\n\n  const onEditFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"updateCombination\",\n        variables: {\n          combinationId: {\n            value: values.combination_id,\n            type: \"Int\",\n            required: true,\n          },\n          name: {\n            value: values.name,\n            type: \"String\",\n            required: true,\n          },\n          code: {\n            value: values.code,\n            type: \"String\",\n            required: true,\n          },\n          description: {\n            value: values.description,\n            type: \"String\",\n            required: false,\n          },\n          isActive: {\n            value: active,\n            type: \"Boolean\",\n            required: false,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            combination: [\n              \"id\",\n              \"name\",\n              \"code\",\n              \"description\",\n              {\n                subjects: [\"id\", \"name\"],\n              },\n              \"created\",\n              \"updated\",\n              \"isActive\",\n              \"canDelete\",\n              \"canEdit\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      form.resetFields();\n      props.onFinish(data.combination);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  useEffect(() => {\n    form.setFieldsValue({\n      name: props.combination.name,\n      code: props.combination.code,\n      is_active: props.combination.isActive,\n    });\n  }, [props.combination]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={form}\n        onFinish={(values) => {\n          values.is_active = active;\n          values.combination_id = parseInt(props.combination.id.toString());\n          onEditFinish(values);\n        }}\n        requiredMark={false}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Name ...\" />\n        </Form.Item>\n\n        <Form.Item\n          name=\"code\"\n          label=\"Code\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Code\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Code ...\" />\n        </Form.Item>\n\n        <Form.Item name=\"is_active\">\n          <Checkbox checked={active} onChange={() => setActive(!active)}>\n            Active\n          </Checkbox>\n        </Form.Item>\n\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  SearchOutlined,\n  DeleteOutlined,\n  SyncOutlined,\n  EditOutlined,\n  PlusOutlined,\n  OrderedListOutlined,\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Modal,\n  Popconfirm,\n  Table,\n  Tag,\n  Tooltip,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Row} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {CombinationData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {AddingCombinationSubjectsComponent} from \"./adding_combinations_subjects_component\";\nimport {CombinationSubjectsListComponent} from \"./combination_subjects_list_component\";\nimport {EditCombinationFormComponent} from \"./forms/edit_combination_form\";\n\ninterface CombinationsSearchFormData {\n  key: string;\n}\n\ninterface CombinationFormData {\n  name: string;\n  code: string;\n  description: string;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\nexport const CombinationsComponent: React.FC<Props> = (props: Props) => {\n  const [combination, setCombination] = useState<CombinationData | any>();\n  const [combinations, setCombinations] = useState<CombinationData[]>([]);\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<CombinationsSearchFormData>();\n  const [form] = Form.useForm<CombinationFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n\n  const [editModal, setEditModal] = useState(false);\n  const [addSubjectsModal, setAddSubjectsModal] = useState(false);\n  const [viewSubjectsModal, setViewSubjectsModal] = useState(false);\n\n  const handleAddSubjectsModal = (combination: CombinationData) => {\n    setCombination(combination);\n    setAddSubjectsModal(true);\n  };\n\n  const handleViewSubjectsModal = (combination: CombinationData) => {\n    setCombination(combination);\n    setViewSubjectsModal(true);\n  };\n\n  const showEditRegionModal = (combination: CombinationData) => {\n    setCombination(combination);\n    setEditModal(true);\n  };\n\n  const handleOk = () => {\n    setEditModal(false);\n  };\n\n  const handleCancel = () => {\n    setEditModal(false);\n  };\n\n  const onEditFinish = async (combination: CombinationData) => {\n    setCombinations(\n      combinations.map((item) => {\n        if (item.id.toString() === combination.id.toString()) {\n          return combination;\n        }\n        return item;\n      })\n    );\n    setEditModal(false);\n  };\n\n  const syncCombinations = async () => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"syncCombinations\",\n        variables: {},\n        fields: [\"success\", \"message\"],\n      },\n    });\n    if (data.success) {\n      message.success(data.message);\n      getCombinations(start, \"\", 20);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const confirmDelete = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"deleteRegion\",\n        variables: {\n          id: {\n            value: id,\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setCombinations(\n        combinations.filter((combination) => combination.id !== id)\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const cancelDelete = () => {\n    message.info(\"Canceled\");\n  };\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Code\",\n      dataIndex: \"code\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.code}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Subjects\",\n      dataIndex: \"subjects\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          {row.subjects.length === 0 && (\n            <Tag color=\"red\">No Subjects Added</Tag>\n          )}\n          {row.subjects.length > 0 &&\n            row?.subjects?.map((subject: any) => {\n              return (\n                <Tag color=\"green\" key={subject.id}>\n                  {subject.name}\n                </Tag>\n              );\n            })}\n          <Tooltip title=\"Click to add more subjects\" color=\"green\">\n            <Button\n              icon={<PlusOutlined />}\n              onClick={() => handleAddSubjectsModal(row)}\n            ></Button>\n          </Tooltip>\n          <Tooltip title=\"Click to View Subjects\" color=\"green\">\n            <Button\n              icon={<OrderedListOutlined />}\n              onClick={() => handleViewSubjectsModal(row)}\n            ></Button>\n          </Tooltip>\n        </span>\n      ),\n    },\n    {\n      title: \"Created\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => (\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Popconfirm\n            title={\"Are you sure to delete this member?\"}\n            onConfirm={() => confirmDelete(row?.id)}\n            onCancel={() => cancelDelete}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            disabled={!row?.canDelete}\n          >\n            <Button\n              icon={<DeleteOutlined />}\n              disabled={!row?.canDelete}\n              danger\n            ></Button>\n          </Popconfirm>\n\n          <Button\n            disabled={!row?.canEdit}\n            onClick={() => showEditRegionModal(row)}\n            icon={<EditOutlined />}\n            danger\n          ></Button>\n        </div>\n      ),\n    },\n  ];\n\n  const getCombinations = async (\n    start: number,\n    key: string = \"\",\n    limit: number = 20\n  ) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"combinations\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              \"name\",\n              \"code\",\n              \"description\",\n              {\n                subjects: [\"id\", \"name\"],\n              },\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setCombinations(data.results);\n    setLoading(false);\n  };\n\n  const handleOnAddingSubject = async (combination: CombinationData) => {\n    setCombinations(\n      combinations.map((comb) => {\n        if (\n          parseInt(comb.id.toString()) === parseInt(combination.id.toString())\n        ) {\n          return combination;\n        }\n        return comb;\n      })\n    );\n  };\n\n  const getSearchForm = () => {\n    return (\n      <>\n        <Form<CombinationsSearchFormData>\n          layout=\"vertical\"\n          form={searchForm}\n          onFinish={(values) => {\n            setStart(1);\n            combinations.length = 0;\n            getCombinations(1, values.key);\n          }}\n        >\n          <Form.Item name=\"key\">\n            <Input\n              size=\"large\"\n              placeholder=\"Search ...\"\n              prefix={<SearchOutlined />}\n              autoComplete=\"off\"\n              allowClear\n            />\n          </Form.Item>\n        </Form>\n      </>\n    );\n  };\n\n  const getSyncButton = () => {\n    return (\n      <>\n        <Button\n          size=\"large\"\n          icon={<SyncOutlined />}\n          onClick={() => syncCombinations()}\n        >\n          Sync Combinations\n        </Button>\n      </>\n    );\n  };\n\n  useEffect(() => {\n    getCombinations(start, \"\", 20);\n  }, []);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        {isMobile && (\n          <>\n            <Col\n              span={24}\n              style={{display: \"flex\", justifyContent: \"flex-end\"}}\n            >\n              {getSyncButton()}\n            </Col>\n            <Col span={24}>{getSearchForm()}</Col>\n          </>\n        )}\n\n        {!isMobile && (\n          <>\n            <Col span={12}>{getSearchForm()}</Col>\n            <Col\n              span={12}\n              style={{display: \"flex\", justifyContent: \"flex-end\"}}\n            >\n              {getSyncButton()}\n            </Col>\n          </>\n        )}\n      </Row>\n\n      <div>\n        <Table\n          loading={loading}\n          columns={columns}\n          dataSource={combinations}\n          scroll={{x: true}}\n          pagination={{\n            onChange: (page, pageSize) => {\n              setLimit(pageSize);\n              getCombinations(page, searchKey, pageSize);\n            },\n            total: total,\n            pageSize: limit,\n            position: [\"bottomCenter\"],\n            showQuickJumper: true,\n          }}\n        />\n      </div>\n\n      <Modal\n        title={\"Editting \" + combination?.name + \" Informations\"}\n        width={isMobile ? \"100vw\" : \"40vw\"}\n        destroyOnClose={true}\n        visible={editModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[]}\n      >\n        <EditCombinationFormComponent\n          combination={combination}\n          onFinish={onEditFinish}\n        />\n      </Modal>\n\n      <Modal\n        title={\"Adding Subjects to \" + combination?.name}\n        width={isMobile ? \"100vw\" : \"40vw\"}\n        destroyOnClose={true}\n        visible={addSubjectsModal}\n        onOk={() => {\n          setCombination(undefined);\n          setAddSubjectsModal(false);\n        }}\n        onCancel={() => {\n          setCombination(undefined);\n          setAddSubjectsModal(false);\n        }}\n        footer={[]}\n      >\n        <AddingCombinationSubjectsComponent\n          combination={combination}\n          onAdd={handleOnAddingSubject}\n        />\n      </Modal>\n\n      <Modal\n        title={combination?.name + \" Subjects\"}\n        width={isMobile ? \"100vw\" : \"40vw\"}\n        destroyOnClose={true}\n        visible={viewSubjectsModal}\n        onOk={() => {\n          setCombination(undefined);\n          setViewSubjectsModal(false);\n        }}\n        onCancel={() => {\n          setCombination(undefined);\n          setViewSubjectsModal(false);\n        }}\n        footer={[]}\n      >\n        <CombinationSubjectsListComponent\n          combination={combination}\n          onAdd={handleOnAddingSubject}\n        />\n      </Modal>\n    </>\n  );\n};\n","import {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {CombinationsComponent} from \"../components/combinations_component\";\nimport {RegionsComponent} from \"../components/regions_component\";\nimport {ControlLayout} from \"../control_layout\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport { ControlPermitted } from \"../components/permissions/control_permission\";\nimport { useGetIdentity } from \"@pankod/refine-core\";\n\nconst Combinations: React.FC = () => {\n  return (\n    <div style={{marginTop: 10}}>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to={\"/control/combinations\"}>Home</Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>Combinations</Breadcrumb.Item>\n      </Breadcrumb>\n      <CombinationsComponent height={80} />\n    </div>\n  );\n};\n\nexport const CombinationsPage = () => {\n  const {data: user} = useGetIdentity();\n\n  const checkIfUserIsAdmin = () => {\n    if (user?.isStaff === false || user?.isAdmin === false) {\n      window.location.pathname = \"/home\";\n    }\n  };\n\n  useEffect(() => {\n    checkIfUserIsAdmin();\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <Combinations />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["AddingCombinationSubjectsComponent","props","useState","subjects","setSubjects","loading","setLoading","start","setStart","searchKey","setSearchKey","Form","searchForm","total","hasNext","setHasNext","addCombinationSubject","useNavigation","push","id","gqlDataProvider","url","method","metaData","operation","variables","combinationId","value","parseInt","combination","toString","type","required","subjectId","fields","data","success","message","length","getSubjects","onAdd","key","page","results","schoolType","useEffect","randKey","span","layout","form","onFinish","values","name","size","placeholder","prefix","SearchOutlined","autoComplete","allowClear","spinning","style","maxHeight","overflowY","dataLength","next","hasMore","scrollableTarget","loader","display","justifyContent","marginTop","endMessage","textAlign","itemLayout","dataSource","renderItem","item","background","marginBottom","paddingLeft","paddingTop","margin","padding","actions","placement","title","onConfirm","okText","cancelText","icon","PlusOutlined","color","marginLeft","CombinationSubjectsListComponent","removeCombinationSubject","combinationSubjectId","subject","DeleteOutlined","EditCombinationFormComponent","isActive","active","setActive","onEditFinish","combination_id","code","description","resetFields","setFieldsValue","is_active","requiredMark","label","rules","checked","onChange","htmlType","CombinationsComponent","setCombination","combinations","setCombinations","setTotal","limit","setLimit","isMobile","Grid","lg","editModal","setEditModal","addSubjectsModal","setAddSubjectsModal","viewSubjectsModal","setViewSubjectsModal","map","syncCombinations","getCombinations","confirmDelete","filter","cancelDelete","columns","dataIndex","fixed","render","text","row","index","onClick","handleAddSubjectsModal","OrderedListOutlined","handleViewSubjectsModal","ReactTimeAgo","date","Date","created","onCancel","disabled","canDelete","danger","canEdit","showEditRegionModal","EditOutlined","pageSize","handleOnAddingSubject","comb","getSearchForm","getSyncButton","SyncOutlined","scroll","x","pagination","position","showQuickJumper","width","destroyOnClose","visible","onOk","footer","undefined","Combinations","to","height","CombinationsPage","user","useGetIdentity","isStaff","isAdmin","window","location","pathname","history","pushState","urlAppendString"],"sourceRoot":""}