{"version":3,"file":"static/js/332.8c0ff5ae.chunk.js","mappings":"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","sources":["apps/control/components/forms/edit_region_form.tsx","apps/control/components/regions_component.tsx","apps/control/pages/regions_page.tsx"],"sourcesContent":["import { Button, Checkbox, Form, Input } from \"@pankod/refine-antd\";\nimport { useEffect, useState } from \"react\";\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n  region?: any;\n}\n\nexport const EditRegionFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [active, setActive] = useState(props.region.isActive);\n  useEffect(() => {\n    props.form.setFieldsValue({\n      name: props.region.name,\n      isActive: props.region.isActive,\n    });\n  }, [props.form, props.region]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values.isActive = active;\n          values.id = parseInt(props.region.id);\n          props.onFinish(values);\n        }}\n        requiredMark={false}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Name ...\" />\n        </Form.Item>\n\n        <Form.Item name=\"isActive\">\n          <Checkbox checked={active} onChange={() => setActive(!active)}>\n            Active\n          </Checkbox>\n        </Form.Item>\n\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {\n  SearchOutlined,\n  DeleteOutlined,\n  SyncOutlined,\n  EditOutlined,\n} from \"@ant-design/icons\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Modal,\n  Popconfirm,\n  Table,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Row, Spin} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {RegionData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {EditRegionFormComponent} from \"./forms/edit_region_form\";\n\ninterface RegionsSearchFormData {\n  key: string;\n}\n\ninterface RegionFormData {\n  name: string;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\nexport const RegionsComponent: React.FC<Props> = (props: Props) => {\n  const [region, setRegion] = useState<RegionData>();\n  const [regions, setRegions] = useState<RegionData[]>([]);\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<RegionsSearchFormData>();\n  const [form] = Form.useForm<RegionFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n\n  const [editModal, setEditModal] = useState(false);\n\n  const showEditRegionModal = (region: RegionData) => {\n    setRegion(region);\n    setEditModal(true);\n  };\n\n  const handleOk = () => {\n    setEditModal(false);\n  };\n\n  const handleCancel = () => {\n    setEditModal(false);\n  };\n\n  const onEditFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"updateRegion\",\n        variables: {\n          id: {value: values.id, type: \"Int\", required: true},\n          name: {\n            value: values.name,\n            type: \"String\",\n            required: true,\n          },\n          isActive: {\n            value: values.isActive,\n            type: \"Boolean\",\n            required: true,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            region: [\n              \"id\",\n              \"name\",\n              \"created\",\n              \"updated\",\n              \"isActive\",\n              \"canDelete\",\n              \"canEdit\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      form.resetFields();\n      setEditModal(false);\n      setRegions(\n        regions.map((region: RegionData) => {\n          if (region.id === data.region.id) {\n            return data.region;\n          }\n          return region;\n        })\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const syncMtaaData = async () => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"syncMtaa\",\n        variables: {},\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const confirmDelete = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"deleteRegion\",\n        variables: {\n          id: {\n            value: id,\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setRegions(regions.filter((region) => region.id !== id));\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const cancelDelete = () => {\n    message.info(\"Canceled\");\n  };\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Created\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => (\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Popconfirm\n            title={\"Are you sure to delete this member?\"}\n            onConfirm={() => confirmDelete(row?.id)}\n            onCancel={() => cancelDelete}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            disabled={!row?.canDelete}\n          >\n            <Button\n              icon={<DeleteOutlined />}\n              disabled={!row?.canDelete}\n            ></Button>\n          </Popconfirm>\n\n          <Button\n            disabled={!row?.canEdit}\n            onClick={() => showEditRegionModal(row)}\n            icon={<EditOutlined />}\n          ></Button>\n        </div>\n      ),\n    },\n  ];\n\n  const getRegions = async (\n    start: number,\n    key: string = \"\",\n    limit: number = 20\n  ) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"regions\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              \"name\",\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setRegions(data.results);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getRegions(start, \"\", 20);\n  }, []);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        <Col span={isMobile ? 24 : 20}>\n          <Form<RegionsSearchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setStart(1);\n              regions.length = 0;\n              getRegions(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search ...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n        <Col\n          span={isMobile ? 24 : 4}\n          style={{display: \"flex\", justifyContent: \"flex-end\"}}\n        >\n          <Button\n            size=\"large\"\n            icon={<SyncOutlined />}\n            onClick={() => syncMtaaData()}\n          >\n            Sync Mtaa\n          </Button>\n        </Col>\n      </Row>\n\n      <div>\n        <Table\n          loading={loading}\n          columns={columns}\n          dataSource={regions}\n          scroll={{x: true}}\n          pagination={{\n            onChange: (page, pageSize) => {\n              setLimit(pageSize);\n              getRegions(page, searchKey, pageSize);\n            },\n            total: total,\n            pageSize: limit,\n            position: [\"bottomCenter\"],\n            showQuickJumper: true,\n          }}\n        />\n      </div>\n\n      <Modal\n        title=\"Edit Region Informations\"\n        width={\"20%\"}\n        visible={editModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[]}\n      >\n        <EditRegionFormComponent\n          form={form}\n          region={region}\n          onFinish={onEditFinish}\n        />\n      </Modal>\n    </>\n  );\n};\n","import {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {RegionsComponent} from \"../components/regions_component\";\nimport {ControlLayout} from \"../control_layout\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport {ControlPermitted} from \"../components/permissions/control_permission\";\n\nconst Regions: React.FC = () => {\n  return (\n    <div style={{marginTop: 10}}>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to={\"/control/analytics\"}>Home</Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>Regions</Breadcrumb.Item>\n      </Breadcrumb>\n      <RegionsComponent height={80} />\n    </div>\n  );\n};\n\nexport const ControlRegionsPage = () => {\n  useEffect(() => {\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <Regions />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["EditRegionFormComponent","props","useState","region","isActive","active","setActive","useEffect","form","setFieldsValue","name","layout","onFinish","values","id","parseInt","requiredMark","label","rules","required","type","message","size","placeholder","checked","onChange","style","display","justifyContent","htmlType","RegionsComponent","setRegion","regions","setRegions","start","setStart","total","setTotal","limit","setLimit","searchKey","setHasNext","loading","setLoading","useNavigation","push","Form","searchForm","isMobile","Grid","lg","editModal","setEditModal","onEditFinish","gqlDataProvider","url","method","metaData","operation","variables","value","fields","data","success","resetFields","map","syncMtaaData","confirmDelete","filter","cancelDelete","columns","title","dataIndex","fixed","render","text","row","index","ReactTimeAgo","date","Date","created","color","onConfirm","onCancel","okText","cancelText","disabled","canDelete","icon","DeleteOutlined","canEdit","onClick","showEditRegionModal","EditOutlined","getRegions","key","page","pageSize","results","hasNext","marginTop","span","length","prefix","SearchOutlined","autoComplete","allowClear","SyncOutlined","dataSource","scroll","x","pagination","position","showQuickJumper","width","visible","onOk","footer","Regions","to","height","ControlRegionsPage","window","history","pushState","urlAppendString"],"sourceRoot":""}