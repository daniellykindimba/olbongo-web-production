{"version":3,"file":"static/js/836.96965454.chunk.js","mappings":"sLASaA,EAAyC,SACpDC,GAEA,OAA4BC,EAAAA,EAAAA,UAASD,EAAME,KAAKC,UAAhD,eAAOC,EAAP,KAAeC,EAAf,KAQA,OAPAC,EAAAA,EAAAA,YAAU,WACRN,EAAMO,KAAKC,eAAe,CACxBC,KAAMT,EAAME,KAAKO,KACjBN,SAAUH,EAAME,KAAKC,UAExB,GAAE,CAACH,EAAMO,KAAMP,EAAME,QAGpB,+BACE,UAAC,KAAD,CACEQ,OAAO,WACPH,KAAMP,EAAMO,KACZI,SAAU,SAACC,GACTA,EAAOT,SAAWC,EAClBQ,EAAOC,GAAKC,SAASd,EAAME,KAAKW,IAChCb,EAAMW,SAASC,EAChB,EACDG,cAAc,EARhB,WAUE,SAAC,UAAD,CACEN,KAAK,OACLO,MAAM,OACNC,MAAO,CACL,CACEC,UAAU,EACVC,KAAM,SACNC,QAAS,sBAPf,UAWE,SAAC,KAAD,CAAOC,KAAK,QAAQC,YAAY,sBAGlC,SAAC,UAAD,CAAWb,KAAK,WAAhB,UACE,SAAC,KAAD,CAAUc,QAASnB,EAAQoB,SAAU,kBAAMnB,GAAWD,EAAjB,EAArC,uBAKF,gBAAKqB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,YAA/C,UACE,SAAC,KAAD,CAAQR,KAAK,UAAUE,KAAK,QAAQO,SAAS,SAA7C,wBAOT,C,8OC3BYC,EAAkC,SAAC7B,GAC9C,OAAwBC,EAAAA,EAAAA,YAAxB,eAAOC,EAAP,KAAa4B,EAAb,KACA,GAA0B7B,EAAAA,EAAAA,UAAqB,IAA/C,eAAO8B,EAAP,KAAcC,EAAd,KACA,GAA0B/B,EAAAA,EAAAA,UAAS,GAAnC,eAAOgC,EAAP,KAAcC,EAAd,KACA,GAA0BjC,EAAAA,EAAAA,UAAS,GAAnC,eAAOkC,EAAP,KAAcC,EAAd,KACA,GAA0BnC,EAAAA,EAAAA,UAAS,IAAnC,eAAOoC,EAAP,KAAcC,EAAd,KACA,GAAkCrC,EAAAA,EAAAA,UAAS,IAA3C,eAAOsC,EAAP,KACA,GADA,MAC8BtC,EAAAA,EAAAA,WAAS,IAAvC,eAAgBuC,GAAhB,WACA,GAA8BvC,EAAAA,EAAAA,WAAS,GAAvC,eAAOwC,EAAP,KAAgBC,EAAhB,KAEA,IADeC,EAAAA,EAAAA,MAARC,KACcC,EAAAA,GAAAA,WAAdC,GAAP,eACA,EAAeD,EAAAA,GAAAA,UAARtC,GAAP,eAEMwC,GADaC,EAAAA,GAAAA,gBACUC,GAE7B,GAAkChD,EAAAA,EAAAA,WAAS,GAA3C,eAAOiD,EAAP,KAAkBC,EAAlB,KAeMC,EAAY,yCAAG,WAAOxC,GAAP,8FACEyC,EAAAA,EAAAA,OAAwB,CAC3CC,IAAK,GACLC,OAAQ,OACRC,SAAU,CACRC,UAAW,aACXC,UAAW,CACT7C,GAAI,CAAC8C,MAAO/C,EAAOC,GAAIM,KAAM,MAAOD,UAAU,GAC9CT,KAAM,CACJkD,MAAO/C,EAAOH,KACdU,KAAM,SACND,UAAU,GAEZf,SAAU,CACRwD,MAAO/C,EAAOT,SACdgB,KAAM,UACND,UAAU,IAGd0C,OAAQ,CACN,UACA,UACA,CACE1D,KAAM,CACJ,KACA,OACA,CACE2D,SAAU,CACR,KACA,OACA,CACEC,OAAQ,CAAC,KAAM,WAIrB,UACA,UACA,WACA,YACA,UACA,kBAxCS,iBACZC,EADY,EACZA,MA8CEC,SACP5C,EAAAA,GAAAA,QAAgB2C,EAAK3C,SACrBb,EAAK0D,cACLd,GAAa,GACbnB,EACED,EAAMmC,KAAI,SAAChE,GACT,OAAIA,EAAKW,KAAOkD,EAAK7D,KAAKW,GACjBkD,EAAK7D,KAEPA,CACR,MAGHkB,EAAAA,GAAAA,MAAc2C,EAAK3C,SA5DF,2CAAH,sDAgEZ+C,GAAa,yCAAG,WAAOtD,GAAP,8FACCwC,EAAAA,EAAAA,OAAwB,CAC3CC,IAAK,GACLC,OAAQ,OACRC,SAAU,CACRC,UAAW,aACXC,UAAW,CACT7C,GAAI,CACF8C,MAAO7C,SAASD,EAAGuD,YACnBjD,KAAM,MACND,UAAU,IAGd0C,OAAQ,CAAC,UAAW,cAbJ,iBACbG,EADa,EACbA,MAgBEC,SACP5C,EAAAA,GAAAA,QAAgB2C,EAAK3C,SACrBY,EAASD,EAAMsC,QAAO,SAACnE,GAAD,OAAUA,EAAKW,KAAOA,CAAtB,MAEtBO,EAAAA,GAAAA,MAAc2C,EAAK3C,SArBD,2CAAH,sDAyBbkD,GAAe,WACnBlD,EAAAA,GAAAA,KAAa,WACd,EAEKmD,GAAU,CACd,CACEC,MAAO,OACPC,UAAW,OACXC,OAAO,EACPC,OAAQ,SAACC,EAAWC,EAAUC,GAAtB,OACN,2BACE,uBAAID,EAAIpE,QAFJ,GAMV,CACE+D,MAAO,WACPC,UAAW,WACXC,OAAO,EACPC,OAAQ,SAACC,EAAWC,EAAUC,GAAtB,OACN,2BACE,uBAAID,EAAIhB,SAASpD,QAFb,GAMV,CACE+D,MAAO,SACPC,UAAW,SACXC,OAAO,EACPC,OAAQ,SAACC,EAAWC,EAAUC,GAAtB,OACN,2BACE,uBAAID,EAAIhB,SAASC,OAAOrD,QAFpB,GAMV,CACE+D,MAAO,UACPC,UAAW,UACXE,OAAQ,SAACC,EAAWC,EAAUC,GAAtB,OACN,+BACE,2BACE,SAACC,EAAA,EAAD,CAAcC,KAAM,IAAIC,KAAKJ,EAAIK,cAH/B,GAQV,CACEV,MAAO,SACPC,UAAW,WACXE,OAAQ,SAACC,EAAWC,EAAUC,GAAtB,OACN,uBACM,OAAHD,QAAG,IAAHA,GAAAA,EAAK1E,UACJ,iBAAMsB,MAAO,CAAC0D,MAAO,SAArB,qBAEA,iBAAM1D,MAAO,CAAC0D,MAAO,OAArB,uBALE,GAUV,CACEX,MAAO,GACPC,UAAW,SACXE,OAAQ,SAACC,EAAWC,EAAUC,GAAtB,OACN,iBAAKrD,MAAO,CAACC,QAAS,OAAQC,eAAgB,YAA9C,WACE,SAAC,KAAD,CACE6C,MAAO,oCACPY,UAAW,kBAAMjB,GAAa,OAACU,QAAD,IAACA,OAAD,EAACA,EAAKhE,GAAzB,EACXwE,SAAU,kBAAMf,EAAN,EACVgB,OAAO,MACPC,WAAW,KACXC,WAAU,OAACX,QAAD,IAACA,GAAAA,EAAKY,WANlB,UAQE,SAAC,KAAD,CACEC,MAAM,SAACC,EAAA,EAAD,IACNH,WAAU,OAACX,QAAD,IAACA,GAAAA,EAAKY,gBAIpB,SAAC,IAAD,CAASjB,MAAO,gBAAUK,QAAV,IAAUA,OAAV,EAAUA,EAAKpE,MAAO,QAAS0E,MAAO,QAAtD,UACE,SAAC,KAAD,CACEO,MAAM,SAACE,EAAA,EAAD,IACNJ,WAAU,OAACX,QAAD,IAACA,GAAAA,EAAKgB,SAChBC,QAAS,kBAxLK,SAAC5F,GACzB4B,EAAQ5B,GACRiD,GAAa,EACd,CAqL0B4C,CAAkBlB,EAAxB,QApBT,IA4BNmB,GAAQ,yCAAG,WACf/D,GADe,qGAEfgE,EAFe,+BAED,GACd5D,EAHe,+BAGC,GAHD,SAKMgB,EAAAA,EAAAA,OAAwB,CAC3CC,IAAK,GACLC,OAAQ,MACRC,SAAU,CACRC,UAAW,QACXC,UAAW,CACTwC,KAAM,CAACvC,MAAO1B,EAAOd,KAAM,MAAOD,UAAU,GAC5C+E,IAAK,CAACtC,MAAOsC,EAAK9E,KAAM,SAAUD,UAAU,GAC5CiF,SAAU,CAACxC,MAAOtB,EAAOlB,KAAM,MAAOD,UAAU,IAElD0C,OAAQ,CACN,QACA,OACA,QACA,UACA,UACA,CACEwC,QAAS,CACP,KACA,OACA,CACEvC,SAAU,CACR,KACA,OACA,CACEC,OAAQ,CAAC,KAAM,WAIrB,WACA,UACA,UACA,UACA,YACA,kBAvCK,gBAKRC,EALQ,EAKRA,KAwCP7B,EAAS6B,EAAKmC,MACd9D,EAAS2B,EAAK5B,OACdK,EAAWuB,EAAKsC,SAChBrE,EAAS+B,EAAKqC,SACd1D,GAAW,GAjDI,4CAAH,sDAwDd,OAJApC,EAAAA,EAAAA,YAAU,WACR0F,GAAS/D,EACV,GAAE,KAGD,iCACE,SAAC,KAAD,CAAKR,MAAO,CAAC6E,UAAW,IAAxB,UACE,SAAC,KAAD,CAAKC,KAAMxD,EAAW,GAAK,GAA3B,UACE,SAAC,KAAD,CACErC,OAAO,WACPH,KAAMuC,EACNnC,SAAU,SAACC,GACTsB,EAAS,GACTH,EAAMyE,OAAS,EACfR,GAAS,EAAGpF,EAAOqF,IACpB,EAPH,UASE,SAAC,UAAD,CAAWxF,KAAK,MAAhB,UACE,SAAC,KAAD,CACEY,KAAK,QACLC,YAAY,aACZmF,QAAQ,SAACC,EAAA,EAAD,IACRC,aAAa,MACbC,YAAU,aAOpB,0BACE,SAAC,KAAD,CACEnE,QAASA,EACT8B,QAASA,GACTsC,WAAY9E,EACZ+E,OAAQ,CAACC,GAAG,GACZC,WAAY,CACVxF,SAAU,SAAC0E,EAAMC,GACf7D,EAAS6D,GACTH,GAASE,EAAM3D,EAAW4D,EAC3B,EACDhE,MAAOA,EACPgE,SAAU9D,EACV4E,SAAU,CAAC,gBACXC,iBAAiB,QAKvB,SAAC,KAAD,CACE1C,MAAM,yBACN2C,MAAO,MACPC,QAASlE,EACTmE,KApSW,WACflE,GAAa,EACd,EAmSKkC,SAjSe,WACnBlC,GAAa,EACd,EAgSKmE,OAAQ,GANV,UAQE,SAAC,IAAD,CACE/G,KAAMA,EACNL,KAAMA,EACNS,SAAUyC,QAKnB,E,gCC7VKmE,EAAkB,WACtB,OACE,iBAAK9F,MAAO,CAAC6E,UAAW,IAAxB,WACE,UAAC,IAAD,YACE,SAAC,SAAD,WACE,SAAC,KAAD,CAAMkB,GAAI,qBAAV,qBAEF,SAAC,SAAD,wBAEF,SAAC3F,EAAD,CAAgB4F,OAAQ,OAG7B,EAEYC,EAAY,WAIvB,OAHApH,EAAAA,EAAAA,YAAU,WACRqH,OAAOC,QAAQC,UAAU,CAAC,EAAG,IAAIC,EAAAA,EAAAA,KAClC,GAAE,KAED,SAAC,IAAD,WACE,SAAC,IAAD,WACE,SAACP,EAAD,OAIP,C","sources":["apps/control/components/forms/edit_ward_form.tsx","apps/control/components/wards_component.tsx","apps/control/pages/wards_page.tsx"],"sourcesContent":["import { Button, Checkbox, Form, Input } from \"@pankod/refine-antd\";\nimport { useEffect, useState } from \"react\";\n\ninterface Props {\n  form?: any;\n  onFinish?: any;\n  ward?: any;\n}\n\nexport const EditWardFormComponent: React.FC<Props> = (\n  props: Props\n) => {\n  const [active, setActive] = useState(props.ward.isActive);\n  useEffect(() => {\n    props.form.setFieldsValue({\n      name: props.ward.name,\n      isActive: props.ward.isActive,\n    });\n  }, [props.form, props.ward]);\n\n  return (\n    <>\n      <Form\n        layout=\"vertical\"\n        form={props.form}\n        onFinish={(values) => {\n          values.isActive = active;\n          values.id = parseInt(props.ward.id);\n          props.onFinish(values);\n        }}\n        requiredMark={false}\n      >\n        <Form.Item\n          name=\"name\"\n          label=\"Name\"\n          rules={[\n            {\n              required: true,\n              type: \"string\",\n              message: \"Please input Name\",\n            },\n          ]}\n        >\n          <Input size=\"large\" placeholder=\"Enter Name ...\" />\n        </Form.Item>\n\n        <Form.Item name=\"isActive\">\n          <Checkbox checked={active} onChange={() => setActive(!active)}>\n            Active\n          </Checkbox>\n        </Form.Item>\n\n        <div style={{ display: \"flex\", justifyContent: \"flex-end\" }}>\n          <Button type=\"primary\" size=\"large\" htmlType=\"submit\">\n            Save\n          </Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/anchor-is-valid */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport {SearchOutlined, DeleteOutlined, EditOutlined} from \"@ant-design/icons\";\nimport {\n  Button,\n  Form,\n  Grid,\n  Input,\n  Popconfirm,\n  Table,\n} from \"@pankod/refine-antd\";\nimport {useNavigation} from \"@pankod/refine-core\";\nimport {Col, message, Modal, Row, Spin, Tooltip} from \"@pankod/refine-antd\";\nimport {gqlDataProvider} from \"api\";\nimport {WardData} from \"apps/core/interfaces\";\nimport {useEffect, useState} from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport ReactTimeAgo from \"react-time-ago\";\nimport {EditWardFormComponent} from \"./forms/edit_ward_form\";\n\ninterface WardsSearchFormData {\n  key: string;\n}\n\ninterface Props {\n  height?: any;\n  canAdd?: boolean;\n}\n\ninterface wardFormData {\n  name: string;\n}\n\nexport const WardsComponent: React.FC<Props> = (props: Props) => {\n  const [ward, setWard] = useState<WardData>();\n  const [wards, setWards] = useState<WardData[]>([]);\n  const [start, setStart] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [limit, setLimit] = useState(20);\n  const [searchKey, setSearchKey] = useState(\"\");\n  const [hasNext, setHasNext] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const {push} = useNavigation();\n  const [searchForm] = Form.useForm<WardsSearchFormData>();\n  const [form] = Form.useForm<wardFormData>();\n  const breakpoint = Grid.useBreakpoint();\n  const isMobile = !breakpoint.lg;\n\n  const [editModal, setEditModal] = useState(false);\n\n  const showEditWardModal = (ward: WardData) => {\n    setWard(ward);\n    setEditModal(true);\n  };\n\n  const handleOk = () => {\n    setEditModal(false);\n  };\n\n  const handleCancel = () => {\n    setEditModal(false);\n  };\n\n  const onEditFinish = async (values: any) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"updateWard\",\n        variables: {\n          id: {value: values.id, type: \"Int\", required: true},\n          name: {\n            value: values.name,\n            type: \"String\",\n            required: true,\n          },\n          isActive: {\n            value: values.isActive,\n            type: \"Boolean\",\n            required: true,\n          },\n        },\n        fields: [\n          \"success\",\n          \"message\",\n          {\n            ward: [\n              \"id\",\n              \"name\",\n              {\n                district: [\n                  \"id\",\n                  \"name\",\n                  {\n                    region: [\"id\", \"name\"],\n                  },\n                ],\n              },\n              \"created\",\n              \"updated\",\n              \"isActive\",\n              \"canDelete\",\n              \"canEdit\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      form.resetFields();\n      setEditModal(false);\n      setWards(\n        wards.map((ward: WardData) => {\n          if (ward.id === data.ward.id) {\n            return data.ward;\n          }\n          return ward;\n        })\n      );\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const confirmDelete = async (id: number) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"post\",\n      metaData: {\n        operation: \"deleteWard\",\n        variables: {\n          id: {\n            value: parseInt(id.toString()),\n            type: \"Int\",\n            required: true,\n          },\n        },\n        fields: [\"success\", \"message\"],\n      },\n    });\n\n    if (data.success) {\n      message.success(data.message);\n      setWards(wards.filter((ward) => ward.id !== id));\n    } else {\n      message.error(data.message);\n    }\n  };\n\n  const cancelDelete = () => {\n    message.info(\"Canceled\");\n  };\n\n  const columns = [\n    {\n      title: \"Name\",\n      dataIndex: \"name\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"District\",\n      dataIndex: \"district\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.district.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Region\",\n      dataIndex: \"region\",\n      fixed: true,\n      render: (text: any, row: any, index: any) => (\n        <span>\n          <a>{row.district.region.name}</a>\n        </span>\n      ),\n    },\n    {\n      title: \"Created\",\n      dataIndex: \"created\",\n      render: (text: any, row: any, index: any) => (\n        <>\n          <span>\n            <ReactTimeAgo date={new Date(row.created)} />\n          </span>\n        </>\n      ),\n    },\n    {\n      title: \"Status\",\n      dataIndex: \"isActive\",\n      render: (text: any, row: any, index: any) => (\n        <a>\n          {row?.isActive ? (\n            <span style={{color: \"green\"}}>Active</span>\n          ) : (\n            <span style={{color: \"red\"}}>Inactive</span>\n          )}\n        </a>\n      ),\n    },\n    {\n      title: \"\",\n      dataIndex: \"action\",\n      render: (text: any, row: any, index: any) => (\n        <div style={{display: \"flex\", justifyContent: \"flex-end\"}}>\n          <Popconfirm\n            title={\"Are you sure to delete this Ward?\"}\n            onConfirm={() => confirmDelete(row?.id)}\n            onCancel={() => cancelDelete}\n            okText=\"Yes\"\n            cancelText=\"No\"\n            disabled={!row?.canDelete}\n          >\n            <Button\n              icon={<DeleteOutlined />}\n              disabled={!row?.canDelete}\n            ></Button>\n          </Popconfirm>\n\n          <Tooltip title={\"Edit \" + row?.name + \" Ward\"} color={\"green\"}>\n            <Button\n              icon={<EditOutlined />}\n              disabled={!row?.canEdit}\n              onClick={() => showEditWardModal(row)}\n            ></Button>\n          </Tooltip>\n        </div>\n      ),\n    },\n  ];\n\n  const getWards = async (\n    start: number,\n    key: string = \"\",\n    limit: number = 20\n  ) => {\n    const {data} = await gqlDataProvider.custom!({\n      url: \"\",\n      method: \"get\",\n      metaData: {\n        operation: \"wards\",\n        variables: {\n          page: {value: start, type: \"Int\", required: true},\n          key: {value: key, type: \"String\", required: false},\n          pageSize: {value: limit, type: \"Int\", required: false},\n        },\n        fields: [\n          \"total\",\n          \"page\",\n          \"pages\",\n          \"hasNext\",\n          \"hasPrev\",\n          {\n            results: [\n              \"id\",\n              \"name\",\n              {\n                district: [\n                  \"id\",\n                  \"name\",\n                  {\n                    region: [\"id\", \"name\"],\n                  },\n                ],\n              },\n              \"isActive\",\n              \"created\",\n              \"updated\",\n              \"canEdit\",\n              \"canDelete\",\n              \"canManage\",\n            ],\n          },\n        ],\n      },\n    });\n    setStart(data.page);\n    setTotal(data.total);\n    setHasNext(data.hasNext);\n    setWards(data.results);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    getWards(start);\n  }, []);\n\n  return (\n    <>\n      <Row style={{marginTop: 10}}>\n        <Col span={isMobile ? 24 : 20}>\n          <Form<WardsSearchFormData>\n            layout=\"vertical\"\n            form={searchForm}\n            onFinish={(values) => {\n              setStart(1);\n              wards.length = 0;\n              getWards(1, values.key);\n            }}\n          >\n            <Form.Item name=\"key\">\n              <Input\n                size=\"large\"\n                placeholder=\"Search ...\"\n                prefix={<SearchOutlined />}\n                autoComplete=\"off\"\n                allowClear\n              />\n            </Form.Item>\n          </Form>\n        </Col>\n      </Row>\n\n      <div>\n        <Table\n          loading={loading}\n          columns={columns}\n          dataSource={wards}\n          scroll={{x: true}}\n          pagination={{\n            onChange: (page, pageSize) => {\n              setLimit(pageSize);\n              getWards(page, searchKey, pageSize);\n            },\n            total: total,\n            pageSize: limit,\n            position: [\"bottomCenter\"],\n            showQuickJumper: true,\n          }}\n        />\n      </div>\n\n      <Modal\n        title=\"Edit Ward Informations\"\n        width={\"20%\"}\n        visible={editModal}\n        onOk={handleOk}\n        onCancel={handleCancel}\n        footer={[]}\n      >\n        <EditWardFormComponent\n          form={form}\n          ward={ward}\n          onFinish={onEditFinish}\n        />\n      </Modal>\n    </>\n  );\n};\n","import {Authenticated, LayoutWrapper} from \"@pankod/refine-core\";\nimport {Breadcrumb} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {WardsComponent} from \"../components/wards_component\";\nimport {ControlLayout} from \"../control_layout\";\nimport {ControlHeader} from \"../header\";\nimport {useEffect} from \"react\";\nimport urlAppendString from \"services/url_append_string\";\nimport { ControlPermitted } from \"../components/permissions/control_permission\";\n\nconst Wards: React.FC = () => {\n  return (\n    <div style={{marginTop: 10}}>\n      <Breadcrumb>\n        <Breadcrumb.Item>\n          <Link to={\"/control/analytics\"}>Home</Link>\n        </Breadcrumb.Item>\n        <Breadcrumb.Item>Wards</Breadcrumb.Item>\n      </Breadcrumb>\n      <WardsComponent height={80} />\n    </div>\n  );\n};\n\nexport const WardsPage = () => {\n  useEffect(() => {\n    window.history.pushState({}, \"\", urlAppendString());\n  }, []);\n  return (\n    <ControlLayout>\n      <ControlPermitted>\n        <Wards />\n      </ControlPermitted>\n    </ControlLayout>\n  );\n};\n"],"names":["EditWardFormComponent","props","useState","ward","isActive","active","setActive","useEffect","form","setFieldsValue","name","layout","onFinish","values","id","parseInt","requiredMark","label","rules","required","type","message","size","placeholder","checked","onChange","style","display","justifyContent","htmlType","WardsComponent","setWard","wards","setWards","start","setStart","total","setTotal","limit","setLimit","searchKey","setHasNext","loading","setLoading","useNavigation","push","Form","searchForm","isMobile","Grid","lg","editModal","setEditModal","onEditFinish","gqlDataProvider","url","method","metaData","operation","variables","value","fields","district","region","data","success","resetFields","map","confirmDelete","toString","filter","cancelDelete","columns","title","dataIndex","fixed","render","text","row","index","ReactTimeAgo","date","Date","created","color","onConfirm","onCancel","okText","cancelText","disabled","canDelete","icon","DeleteOutlined","EditOutlined","canEdit","onClick","showEditWardModal","getWards","key","page","pageSize","results","hasNext","marginTop","span","length","prefix","SearchOutlined","autoComplete","allowClear","dataSource","scroll","x","pagination","position","showQuickJumper","width","visible","onOk","footer","Wards","to","height","WardsPage","window","history","pushState","urlAppendString"],"sourceRoot":""}